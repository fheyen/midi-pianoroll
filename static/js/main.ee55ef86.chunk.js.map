{"version":3,"sources":["lib/ui/View.js","lib/ui/Graphics.js","components/PitchTimeChart.js","App.js","index.js"],"names":["View","props","margin","top","right","bottom","left","rowSpan","columnSpan","canResizeRows","canResizeColumns","onResize","increaseRows","state","rowlimit","outerHeight","viewSize","newSpan","viewHeight","setState","height","decreaseRows","increaseColumns","columnLimit","outerWidth","viewWidth","width","decreaseColumns","close","toggleView","name","getSizeControlHTML","className","onClick","title","disabled","icon","faArrowsAltV","faLongArrowAltUp","faArrowsAltH","faLongArrowAltLeft","faTimesCircle","additionalState","this","ow","oh","PureComponent","setupCanvas","canvas","dpr","window","devicePixelRatio","rect","getBoundingClientRect","ctx","getContext","scale","drawNoteTrapezoid","x","y","height2","beginPath","moveTo","lineTo","closePath","fill","PitchTimeChart","componentDidMount","initialize","overviewHeight","yAxisLabelType","svg","select","selectAll","remove","scaleLinear","range","xOv","yOv","xAxis","axisBottom","yAxis","axisLeft","tickFormat","d","Midi","getMidiNoteByNr","label","xAxisEl","append","attr","call","yAxisEl","text","highlightCanvas","initialized","drawNotes","notes","boxHeight","veloScale","domain","note","startPos","start","endPos","end","xPos","h","velocity","pitch","Math","max","draw","selectedTrack","showAllTime","midiFileData","timeSelection","clearRect","track","ctx2","allNotes","length","Utils","flattenArray","min","extent","xDomain","interval","low","high","tracks","drawRowBandsForSharps","drawMeasures","colors","schemeCategory10","boxHeight2","forEach","tr","i","fillStyle","fillRect","clipLeftRight","drawTimeSelection","drawCurrentPlayerTime","oldFill","rowHeight","isSharp","yPos","xmlFileData","part","parts","measureLinePositions","pos","currentPlayerTime","xOv1","xOv2","x1","x2","handleBrushed","e","brushStartEvent","setTimeSelection","startX","offsetX","startY","offsetY","endX","nativeEvent","startTime","invert","endTime","minTime","maxTime","clipValue","sorted","swapSoSmallerFirst","liveNotes","resizeComponent","style","gridArea","ref","n","onMouseDownCapture","onMouseUpCapture","transform","onChange","target","value","Array","map","_","background","faToggleOn","faToggleOff","App","floor","innerWidth","innerHeight","similarSections","addEventListener","source","document","getElementById","_this","MidiParser","parse","obj","preprocessMidiFileData","noteObjs","alert","s","type","id","href","faGithub","Component","ReactDOM","render","StrictMode"],"mappings":"0TAIqBA,E,kDAUjB,WACIC,GAMD,IAAD,EALEC,EAKF,uDALW,CAAEC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,GAC9CC,EAIF,uDAJY,EACVC,EAGF,uDAHe,EACbC,IAEF,yDADEC,IACF,8EACE,cAAMT,IA0BVU,SAAW,aA3BT,EA0DFC,aAAe,WAAO,IAAD,EACoC,EAAKC,MAAlDN,EADS,EACTA,QAASO,EADA,EACAA,SAAUZ,EADV,EACUA,OAAQO,EADlB,EACkBA,cAC3BM,EAAgB,EAAKd,MAAMe,SAA3BD,YACR,GAAKN,KACDF,GAAWO,GAAf,CACA,IAAMG,EAAUV,EAAU,EACpBW,EAAaH,EAAcE,EACjC,EAAKE,SACD,CACIZ,QAASU,EACTC,aACAE,OAAQF,EAAahB,EAAOC,IAAMD,EAAOG,QAE7C,EAAKM,YAvEX,EA2EFU,aAAe,WAAO,IAAD,EAC0B,EAAKR,MAAxCN,EADS,EACTA,QAASL,EADA,EACAA,OAAQO,EADR,EACQA,cACjBM,EAAgB,EAAKd,MAAMe,SAA3BD,YACR,GAAKN,KACDF,GAAW,GAAf,CACA,IAAMU,EAAUV,EAAU,EACpBW,EAAaH,EAAcE,EACjC,EAAKE,SACD,CACIZ,QAASU,EACTC,aACAE,OAAQF,EAAahB,EAAOC,IAAMD,EAAOG,QAE7C,EAAKM,YAxFX,EA4FFW,gBAAkB,WAAO,IAAD,EAC0C,EAAKT,MAA3DL,EADY,EACZA,WAAYe,EADA,EACAA,YAAarB,EADb,EACaA,OAAQQ,EADrB,EACqBA,iBACjCc,EAAe,EAAKvB,MAAMe,SAA1BQ,WACR,GAAKd,KACDF,GAAce,GAAlB,CACA,IAAMN,EAAUT,EAAa,EACvBiB,EAAYD,EAAaP,EAC/B,EAAKE,SACD,CACIX,WAAYS,EACZQ,YACAC,MAAOD,EAAYvB,EAAOI,KAAOJ,EAAOE,OAE5C,EAAKO,YAzGX,EA6GFgB,gBAAkB,WAAO,IAAD,EAC6B,EAAKd,MAA9CL,EADY,EACZA,WAAYN,EADA,EACAA,OAAQQ,EADR,EACQA,iBACpBc,EAAe,EAAKvB,MAAMe,SAA1BQ,WACR,GAAKd,KACDF,GAAc,GAAlB,CACA,IAAMS,EAAUT,EAAa,EACvBiB,EAAYD,EAAaP,EAC/B,EAAKE,SACD,CACIX,WAAYS,EACZQ,YACAC,MAAOD,EAAYvB,EAAOI,KAAOJ,EAAOE,OAE5C,EAAKO,YA1HX,EA8HFiB,MAAQ,WAAO,IAAD,EACmB,EAAK3B,MAA1B4B,EADE,EACFA,WAAYC,EADV,EACUA,KAChBD,GAAcC,GACdD,EAAWC,IAjIjB,EAwIFC,mBAAqB,kBACjB,sBAAKC,UAAU,cAAf,UACK,EAAKnB,MAAMJ,eACR,iCACI,wBACIwB,QAAS,EAAKrB,aAEdsB,MAAO,gBACPC,SAAU,EAAKtB,MAAMN,SAAW,EAAKM,MAAMC,SAJ/C,SAMI,cAAC,IAAD,CAAiBsB,KAAMC,QAE3B,wBACIJ,QAAS,EAAKZ,aACda,MAAO,gBACPC,SAAU,EAAKtB,MAAMN,SAAW,EAHpC,SAKI,cAAC,IAAD,CAAiB6B,KAAME,WAIlC,EAAKzB,MAAMH,kBACR,iCACI,wBACIuB,QAAS,EAAKX,gBACdY,MAAO,mBACPC,SAAU,EAAKtB,MAAML,YAAc,EAAKK,MAAMU,YAHlD,SAKI,cAAC,IAAD,CAAiBa,KAAMG,QAE3B,wBACIN,QAAS,EAAKN,gBACdO,MAAO,mBACPC,SAAU,EAAKtB,MAAML,YAAc,EAHvC,SAKI,cAAC,IAAD,CAAiB4B,KAAMI,WAInC,wBACIP,QAAS,EAAKL,MACdM,MAAO,QAFX,SAII,cAAC,IAAD,CAAiBE,KAAMK,YAnLjC,MAEsCxC,EAAMe,SAAlCQ,EAFV,EAEUA,WAAYT,EAFtB,EAEsBA,YACdU,EAAYD,EAAahB,EACzBU,EAAaH,EAAcR,EAJnC,OAKE,EAAKM,MAAQ,CACTN,UACAC,aACAC,gBACAC,mBACAI,SAAU,GACVS,YAAa,EACbC,aACAT,cACAG,aACAO,YACAvB,SACAwB,MAAQF,EAAahB,EAAcN,EAAOI,KAAOJ,EAAOE,MACxDgB,OAASL,EAAcR,EAAWL,EAAOC,IAAMD,EAAOG,QAlB5D,E,8DAqCqC,IAAvBqC,EAAsB,uDAAJ,GAAI,EACEC,KAAK1C,MAAMe,SAAvCQ,EAD0B,EAC1BA,WAAYT,EADc,EACdA,YADc,EAEuC4B,KAAK9B,MAA1D+B,EAFc,EAE1BpB,WAA6BqB,EAFH,EAEV9B,YAAiBb,EAFP,EAEOA,OAAQK,EAFf,EAEeA,QAASC,EAFxB,EAEwBA,WAC1D,GAAIoC,IAAOpB,GAAcqB,IAAO9B,EAAa,CACzC,IAAMU,EAAYD,EAAahB,EACzBU,EAAaH,EAAcR,EACjCoC,KAAKxB,SAAL,2BAEWuB,GAFX,IAGQlB,aACAT,cACAU,YACAP,aACAQ,MAAQF,EAAahB,EAAcN,EAAOI,KAAOJ,EAAOE,MACxDgB,OAASL,EAAcR,EAAWL,EAAOC,IAAMD,EAAOG,SAE1DsC,KAAKhC,e,GAtEamC,iB,uCCQ3B,SAASC,EAAYC,GAExB,IAAIC,EAAMC,OAAOC,kBAAoB,EAEjCC,EAAOJ,EAAOK,wBAGlBL,EAAOtB,MAAQ0B,EAAK1B,MAAQuB,EAC5BD,EAAO5B,OAASgC,EAAKhC,OAAS6B,EAC9B,IAAIK,EAAMN,EAAOO,WAAW,MAI5B,OADAD,EAAIE,MAAMP,EAAKA,GACRK,EAmVJ,SAASG,EAAkBH,EAAKI,EAAGC,EAAGjC,EAAON,EAAQwC,GACxDN,EAAIO,YACJP,EAAIQ,OAAOJ,EAAGC,GACdL,EAAIS,OAAOL,EAAGC,EAAIvC,GAClBkC,EAAIS,OAAOL,EAAIhC,EAAOiC,GAAKvC,EAAS,EAAIwC,EAAU,IAClDN,EAAIS,OAAOL,EAAIhC,EAAOiC,GAAKvC,EAAS,EAAIwC,EAAU,IAClDN,EAAIU,YACJV,EAAIW,O,ICtWaC,E,kDAEjB,WAAYjE,GAAQ,IAAD,6BAEf,cAAMA,EADS,CAAEE,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,MAe3D6D,kBAAoB,kBAAM,EAAKC,cAhBZ,EAkBnBzD,SAAW,kBAAM,EAAKyD,cAlBH,EA2BnBA,WAAa,WAAO,IAAD,EAC2C,EAAKvD,MAAvDa,EADO,EACPA,MAAON,EADA,EACAA,OAAQiD,EADR,EACQA,eAAgBC,EADxB,EACwBA,eACjCC,EAAMC,YAAO,EAAKD,KACxBA,EAAIE,UAAU,KAAKC,SAEnB,IAAMhB,EAAIiB,cAAcC,MAAM,CAAC,EAAGlD,IAC5BmD,EAAMF,cAAcC,MAAM,CAAC,EAAGlD,IAC9BiC,EAAIgB,cAAcC,MAAM,CAACxD,EAAQiD,EAAiB,KAClDS,EAAMH,cAAcC,MAAM,CAACP,EAAgB,IAE3CU,EAAQC,YAAWtB,GACnBuB,EAAQC,YAASvB,GACA,SAAnBW,GACAW,EAAME,YAAW,SAAAC,GAAC,uBAAIC,OAAKC,gBAAgBF,UAAzB,aAAI,EAAyBG,SAEnD,IAAMC,EAAUjB,EAAIkB,OAAO,KACtBC,KAAK,QAAS,QACdA,KAAK,YAFM,uBAEuBtE,EAFvB,MAGXuE,KAAKZ,GACJa,EAAUrB,EAAIkB,OAAO,KACtBC,KAAK,QAAS,QACdC,KAAKV,GAEVV,EAAIkB,OAAO,QACNC,KAAK,QAAS,cACdG,KAAK,SACLH,KAAK,YAHV,gCAGgDtE,EAASiD,GAAkB,EAH3E,KAGiF,GAHjF,MAKAtB,EAAY,EAAKC,QACjBD,EAAY,EAAK+C,iBACjB,EAAK3E,SAAS,CAAE4E,aAAa,EAAMxB,MAAKb,IAAGmB,MAAKlB,IAAGmB,MAAKC,QAAOE,QAAOO,UAASI,aAzDhE,EAoEnBI,UAAY,SAAC1C,EAAK2C,EAAOC,EAAWxC,EAAGC,GAAO,IAAD,IACf,EAAK9C,MAAvBa,EADiC,EACjCA,MAAOxB,EAD0B,EAC1BA,OACTiG,EAAYxB,cACbyB,OAAO,CAAC,EAAG,MACXxB,MAAM,CAAa,GAAZsB,EAAiBA,IAJY,cAKxBD,GALwB,IAKzC,2BAAwB,CAAC,IAAhBI,EAAe,QACdC,EAAW5C,EAAE2C,EAAKE,OAClBC,EAAS9C,EAAE2C,EAAKI,KAEtB,KAAID,EAAS,GAAKF,EAAW5E,GAA7B,CAGA,IAAMgF,EAAOxG,EAAOI,KAAOgG,EAErBK,EAAIR,EAAUE,EAAKO,UAGzBnD,EAAkBH,EAAKoD,EAFVxG,EAAOC,IAAMwD,EAAE0C,EAAKQ,OAASF,EAAI,EACpCG,KAAKC,IAAIP,EAASF,EAAU,GACAK,EAAGA,EAAI,KAjBR,gCApE1B,EA4FnBK,KAAO,WAAO,IAAD,EAC4I,EAAKnG,MAAlJY,EADC,EACDA,UAAWP,EADV,EACUA,WAAYhB,EADtB,EACsBA,OAAQwB,EAD9B,EAC8BA,MAAON,EADrC,EACqCA,OAAQiD,EAD7C,EAC6CA,eAAgBX,EAD7D,EAC6DA,EAAGmB,EADhE,EACgEA,IAAKlB,EADrE,EACqEA,EAAGmB,EADxE,EACwEA,IAAKC,EAD7E,EAC6EA,MAAOE,EADpF,EACoFA,MAAOO,EAD3F,EAC2FA,QAASI,EADpG,EACoGA,QAASqB,EAD7G,EAC6GA,cAAeC,EAD5H,EAC4HA,YAD5H,EAE+B,EAAKjH,MAArCkH,EAFC,EAEDA,aAAcC,EAFb,EAEaA,cAEhB9D,EAAM,EAAKN,OAAOO,WAAW,MACnCD,EAAI+D,UAAU,EAAG,EAAG5F,EAAWP,GAC/B,IAIIoG,EAJEC,EAAO,EAAKzB,gBAAgBvC,WAAW,MAC7CgE,EAAKF,UAAU,EAAG,EAAG5F,EAAWP,GAIhC,IAAIsG,EAAW,GAYf,GAXIL,GAAgBA,EAAaM,OAAS,IAGlCD,EAFkB,QAAlBP,EAEWS,QAAMC,aAAaR,GAInBA,EADXG,EAAQR,KAAKc,IAAIX,EAAeE,EAAaM,OAAS,KAKtC,IAApBD,EAASC,OAAb,CAvBS,MA4BYI,YAAOL,GAAU,SAAApC,GAAC,OAAIA,EAAEqB,OA5BpC,mBA4BFF,EA5BE,KA4BKE,EA5BL,KA6BHqB,EAAU,CAACvB,EAAQ,EAAIA,EAAQ,EAAGE,GAExC,GADA5B,EAAIuB,OAAO0B,GACPZ,EAEAxD,EAAE0C,OAAO0B,OACN,CACH,IAAIC,EAAW,CAAC,EAAGtB,GACfW,IACAW,EAAWX,GAEf1D,EAAE0C,OAAO2B,GAEbvC,EAAQG,KAAKZ,GAzCJ,MA2CW8C,YAAOL,GAAU,SAAApC,GAAC,OAAIA,EAAEyB,SA3CnC,mBA2CFmB,EA3CE,KA2CGC,EA3CH,KA4CTtE,EAAEyC,OAAO,EAAE4B,EAAM,GAAIC,EAAO,IAC5BnD,EAAIsB,OAAO,EAAE4B,EAAM,GAAIC,EAAO,IAC9BrC,EAAQD,KAAKV,GAGb,IAAIiD,EAA2B,QAAlBjB,EAA0BE,EAAe,CAACA,EAAaG,IAGpE,EAAKa,sBAAsB7E,EAAKpD,EAAQyD,EAAGqE,EAAKC,EAAMvG,EAAO,6BAC7D,EAAK0G,aAAa9E,GAGlB,IAAM+E,EAASC,IACTpC,EAAY9E,GAAU6G,EAAOD,EAAM,GACnCO,EAAalE,GAAkB4D,EAAOD,EAAM,GAalD,GAZAE,EAAOM,SAAQ,SAACC,EAAIC,GAChBpF,EAAIqF,UAAYN,EAAOK,EAAIL,EAAOZ,QAClC,EAAKzB,UAAU1C,EAAKmF,EAAIvC,EAAWxC,EAAGC,GACtC,EAAKqC,UAAU1C,EAAKmF,EAAIF,EAAY1D,EAAKC,MAI7CxB,EAAIqF,UAAY,OAChBrF,EAAIsF,SAAS1I,EAAOI,KAAMJ,EAAOC,IAAMkE,EAAiB,GAAI3C,EAAO,GDoSpE,SAAuB4B,EAAKpD,EAAQwB,EAAON,GAC9CkC,EAAI+D,UAAU,EAAGnH,EAAOC,IAAKD,EAAOI,KAAMc,GAC1CkC,EAAI+D,UAAUnH,EAAOI,KAAOoB,EAAOxB,EAAOC,IAAKD,EAAOE,MAAOgB,GCrSzDyH,CAAcvF,EAAKpD,EAAQwB,EAAON,GAG9BgG,EAAe,CAAC,IAAD,cACMA,EADN,GACRb,EADQ,KACDE,EADC,KAEf,EAAKqC,kBAAkBvB,EAAMhB,EAAOE,EAAK,2BAG7C,EAAKsC,sBAAsBxB,KAxKZ,EA+KnBY,sBAAwB,SAAC7E,EAAKpD,EAAQyD,EAAGqE,EAAKC,EAAMvG,GAAmD,IAA5CiH,EAA2C,uDAA/B,2BAC7DK,EAAU1F,EAAIqF,UACpBrF,EAAIqF,UAAYA,EAGhB,IAFA,IAAMM,EAAYtF,EAAE,GAAKA,EAAE,GACrB+C,EAAOxG,EAAOI,KACXuG,EAAQmB,EAAM,EAAGnB,GAASoB,EAAO,EAAGpB,IAEzC,GAAIxB,OAAK6D,QAAQrC,GAAQ,CACrB,IAAMsC,EAAOjJ,EAAOC,IAAMwD,EAAEkD,GAASoC,EAAY,EACjD3F,EAAIsF,SAASlC,EAAMyC,EAAMzH,EAAOuH,GAGxC3F,EAAIqF,UAAYK,GA3LD,EAkMnBZ,aAAe,SAAC9E,GAAS,IAAD,EACmB,EAAKrD,MAApCmJ,EADY,EACZA,YAAanC,EADD,EACCA,cADD,EAEiC,EAAKpG,MAAlDX,EAFY,EAEZA,OAAQwB,EAFI,EAEJA,MAAON,EAFH,EAEGA,OAAQiD,EAFX,EAEWA,eAAgBX,EAF3B,EAE2BA,EAC/C,GAAK0F,EAAL,CACA,IAAMC,EAAOD,EAAYE,MAAwB,QAAlBrC,EAA0B,EAAIA,GAC7D3D,EAAIqF,UAAY,2BAChB,IANoB,EAMdQ,EAAOjJ,EAAOC,IAAMkE,EAAiB,GACrCsC,EAAIvF,EAASiD,EAAiB,GAPhB,cAQNgF,EAAKE,sBARC,IAQpB,2BAAyC,CAAC,IAChCC,EAAM9F,EADyB,SAEjC8F,GAAO,GAAKA,EAAM9H,GACtB4B,EAAIsF,SAAS1I,EAAOI,KAAOkJ,EAAKL,EAAM,EAAGxC,IAXzB,iCAlML,EAoNnBoC,sBAAwB,SAACzF,GAAS,IAAD,EACsB,EAAKzC,MAAhDX,EADqB,EACrBA,OAAQkB,EADa,EACbA,OAAQiD,EADK,EACLA,eAAgBX,EADX,EACWA,EAAGmB,EADd,EACcA,IACnC4E,EAAsB,EAAKxJ,MAA3BwJ,kBACkB,OAAtBA,IACJnG,EAAIqF,UAAY,YAChBrF,EAAIsF,SAAS1I,EAAOI,KAAOuE,EAAI4E,GAAoBvJ,EAAOC,IAAK,EAAGkE,GAClEf,EAAIsF,SAAS1I,EAAOI,KAAOoD,EAAE+F,GAAoBvJ,EAAOC,IAAMkE,EAAiB,GAAI,EAAGjD,EAASiD,EAAiB,MA1NjG,EAgOnByE,kBAAoB,SAACxF,EAAKiD,EAAOE,EAAKxC,GAAU,IAAD,EACQ,EAAKpD,MAAhDX,EADmC,EACnCA,OAAQkB,EAD2B,EAC3BA,OAAQiD,EADmB,EACnBA,eAAgBX,EADG,EACHA,EAAGmB,EADA,EACAA,IAC3CvB,EAAIqF,UAAY1E,EAChB,IAAMyF,EAAOxJ,EAAOI,KAAOuE,EAAI0B,GACzBoD,EAAOzJ,EAAOI,KAAOuE,EAAI4B,GAC/BnD,EAAIsF,SAASc,EAAMxJ,EAAOC,IAAKwJ,EAAOD,EAAMrF,GAC5C,IAAMuF,EAAK1J,EAAOI,KAAOoD,EAAE6C,GACrBsD,EAAK3J,EAAOI,KAAOoD,EAAE+C,GAC3BnD,EAAIsF,SAASgB,EAAI1J,EAAOC,IAAMkE,EAAiB,GAAIwF,EAAKD,EAAIxI,EAASiD,EAAiB,KAxOvE,EA+OnByF,cAAgB,SAACC,GAAO,IAAD,EACsC,EAAKlJ,MAAtDX,EADW,EACXA,OAAQmE,EADG,EACHA,eAAgBQ,EADb,EACaA,IAAKmF,EADlB,EACkBA,gBAC7BC,EAAqB,EAAKhK,MAA1BgK,iBACR,GAAKF,GAAMC,EAAX,CAHmB,IAIFE,EAA4BF,EAArCG,QAA0BC,EAAWJ,EAApBK,QACRC,EAASP,EAAEQ,YAApBJ,QAER,KAAIC,EAASlK,EAAOC,KAAOiK,EAASlK,EAAOC,IAAMkE,GAAjD,CAIA,IAAImG,EAAY3F,EAAI4F,OAAOP,EAAShK,EAAOI,MACvCoK,EAAU7F,EAAI4F,OAAOH,EAAOpK,EAAOI,MAZpB,EAcQuE,EAAIuB,SAdZ,mBAcZuE,EAdY,KAcHC,EAdG,KAenBJ,EAAY9C,QAAMmD,UAAUL,EAAWG,EAASC,GAChDF,EAAUhD,QAAMmD,UAAUH,EAASC,EAASC,GAC5C,IAAME,EAASpD,QAAMqD,mBAAmBP,EAAWE,GAE/CI,EAAO,GAAKA,EAAO,GAAK,IACxBA,EAAO,GAAKA,EAAO,GAAK,GAG5Bb,EAAiBa,MAnQjB,EAAKjK,MAAL,2BACO,EAAKA,OADZ,IAEIwD,eAAgB,GAChB6C,aAAa,EACbD,cAAe,MAEf3C,eAAgB,QAChB4B,UAAW,KACXD,MAAO,GACP+E,UAAW,KAZA,E,iEAqBfrI,KAAKsI,kBACDtI,KAAK9B,MAAMkF,aACXpD,KAAKqE,S,+BAkPH,IAAD,SACqCrE,KAAK9B,MAAvCY,EADH,EACGA,UAAWP,EADd,EACcA,WAAYhB,EAD1B,EAC0BA,OAD1B,EAEmCyC,KAAK1C,MAArCkH,EAFH,EAEGA,aAAcF,EAFjB,EAEiBA,cAEtB,OACI,sBACIjF,UAAU,sBACVkJ,MAAO,CAAEC,SAAS,QAAD,OAAUxI,KAAK9B,MAAMN,QAArB,mBAAuCoC,KAAK9B,MAAML,aAFvE,UAII,wBACIwB,UAAU,aACVoJ,IAAK,SAAAC,GAAC,OAAI,EAAKrI,OAASqI,GACxBH,MAAO,CAAExJ,MAAOD,EAAWL,OAAQF,GACnCoK,mBAAoB,SAACvB,GAAD,OAAO,EAAK5I,SAAS,CAAE6I,gBAAiBD,EAAEQ,eAC9DgB,iBAAkB5I,KAAKmH,gBAE3B,wBACI9H,UAAU,6BACVoJ,IAAK,SAAAC,GAAC,OAAI,EAAKvF,gBAAkBuF,GACjCH,MAAO,CAAExJ,MAAOD,EAAWL,OAAQF,KAEvC,sBACIQ,MAAOD,EACPL,OAAQF,EAFZ,UAII,sBACIc,UAAU,UACV0B,EAAGjC,EAAY,EACfkC,EAAG,GAHP,6BAOA,mBACIyH,IAAK,SAAAC,GAAC,OAAI,EAAK9G,IAAM8G,GACrBG,UAAS,oBAAetL,EAAOI,KAAtB,aAA+BJ,EAAOC,IAAtC,OAEb,sBACI6B,UAAU,aACV0B,EAAGjC,EAAY,EACfkC,EAAGzC,EAAa,EAHpB,gCAQJ,sBAAKc,UAAU,eAAf,UACI,yBACIE,MAAM,gBACNuJ,SAAU,SAAC1B,GAAD,OAAO,EAAK5I,SAAS,CAAE8F,cAAe8C,EAAE2B,OAAOC,SACzDxJ,SAAUgF,EAAaM,OAAS,GAAuB,QAAlBR,EAHzC,UAKI,wBAAkB0E,MAAM,MAAxB,uBAAY,OACX,IAAIC,MAAMzE,EAAaM,QAAQxD,KAAK,GAAG4H,KAAI,SAACC,EAAGpD,GAAJ,OACxC,yBAEIiD,MAAOjD,EACPwC,MAAO,CAAEa,WAAYzD,IAAiBI,EAAIJ,IAAiBb,SAH/D,mBAKWiB,IAJFA,SAQjB,yBACIxG,MAAM,gBACNuJ,SAAU,SAAC1B,GAAD,OAAO,EAAK5I,SAAS,CAAEmD,eAAgByF,EAAE2B,OAAOC,OAAS,EAAKvH,aAF5E,UAII,wBAAQuH,MAAM,QAAd,uBACA,wBAAQA,MAAM,OAAd,0BAEJ,yBACIzJ,MAAM,0EACND,QAAS,kBAAM,EAAKd,SAAS,CAAE+F,aAAc,EAAKrG,MAAMqG,eAF5D,UAII,cAAC,IAAD,CAAiB9E,KAAMO,KAAK9B,MAAMqG,YAAc8E,IAAaC,MAJjE,oC,GA/UwBjM,G,QCJvBkM,E,kDAEnB,WAAYjM,GAAQ,IAAD,8BACjB,cAAMA,IAoCRU,SAAW,WACT,EAAKQ,SAAS,CACZH,SAAU,CACRQ,WAAYsF,KAAKqF,MAAMjJ,OAAOkJ,WAAa,IAC3CrL,YAAa+F,KAAKqF,MAAMjJ,OAAOmJ,YAAc,SAzChC,EAkDnBpC,iBAAmB,SAAC7C,GAClB,EAAKjG,SAAS,CAAEiG,gBAAekF,gBAAiB,MAjDhD,EAAKzL,MAAQ,CACXG,SAAU,CACRQ,WAAY,IACZT,YAAa,KAEfoG,aAAc,GACdC,cAAe,MARA,E,gEAcjBlE,OAAOqJ,iBAAiB,SAAU5J,KAAKhC,UAAU,GACjDgC,KAAKhC,WAIL,IAAI6L,EAASC,SAASC,eAAe,cAE/BC,EAAQhK,KACdiK,IAAWC,MAAML,GAAQ,SAAUM,GACjC,IACE,IACMxD,EADSyD,iCAAuBD,GACjBxD,MAAMuC,KAAI,SAAAzG,GAAC,OAAIA,EAAE4H,YACtCL,EAAMxL,SAAS,CAAEgG,aAAcmC,IAC/B,MAAOS,GACPkD,MAAM,4C,+BA2BV,IAAMC,EAAIvK,KAAK9B,MACf,OACE,sBAAKmB,UAAS,WAAd,UACE,qBAAKA,UAAU,gBAAf,SACE,uBACEA,UAAU,YACVmL,KAAK,OACLC,GAAG,iBAGP,cAAC,EAAD,CACEtL,KAAK,kBACLd,SAAUkM,EAAElM,SACZmG,aAAc+F,EAAE/F,aAChBC,cAAe8F,EAAE9F,cACjB6C,iBAAkBtH,KAAKsH,mBAEzB,qBAAKjI,UAAU,aAAf,SACE,oBAAGqL,KAAK,2CAAR,UACE,cAAC,IAAD,CAAiBjL,KAAMkL,MADzB,4D,GA3EuBC,aCLjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASC,eAAe,W","file":"static/js/main.ee55ef86.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowsAltH, faArrowsAltV, faLongArrowAltLeft, faLongArrowAltUp, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class View extends PureComponent {\r\n\r\n    /**\r\n     * @param {Props} props props\r\n     * @param {Obbject} margin margin\r\n     * @param {number} rowSpan number of rows this view initially has\r\n     * @param {number} colSpan number of columns this view initially has\r\n     * @param {boolean} canResizeRows allow to resize rows?\r\n     * @param {boolean} canResizeColumns allow to resize columns?\r\n     */\r\n    constructor(\r\n        props,\r\n        margin = { top: 0, right: 0, bottom: 0, left: 0 },\r\n        rowSpan = 1,\r\n        columnSpan = 1,\r\n        canResizeRows = true,\r\n        canResizeColumns = true,\r\n    ) {\r\n        super(props);\r\n        const { outerWidth, outerHeight } = props.viewSize;\r\n        const viewWidth = outerWidth * columnSpan;\r\n        const viewHeight = outerHeight * rowSpan;\r\n        this.state = {\r\n            rowSpan,\r\n            columnSpan,\r\n            canResizeRows,\r\n            canResizeColumns,\r\n            rowlimit: 12,\r\n            columnLimit: 2,\r\n            outerWidth,\r\n            outerHeight,\r\n            viewHeight,\r\n            viewWidth,\r\n            margin,\r\n            width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n            height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Views shoud overwrite this method,\r\n     * to react to resizing.\r\n     * This method is called by resizeComponent (see below).\r\n     */\r\n    onResize = () => { }\r\n\r\n    /**\r\n     * Resizes the component by updating the width and height depending on\r\n     * the received outerWidth and outerHeight props and the internal margin.\r\n     * After updating the state, the callback function will be called.\r\n     * @param {Object} component\r\n     * @param {Function} callback\r\n     * @param {Object} additionalState other properties to set in the state\r\n     */\r\n    resizeComponent(additionalState = {}) {\r\n        const { outerWidth, outerHeight } = this.props.viewSize;\r\n        const { outerWidth: ow, outerHeight: oh, margin, rowSpan, columnSpan } = this.state;\r\n        if (ow !== outerWidth || oh !== outerHeight) {\r\n            const viewWidth = outerWidth * columnSpan;\r\n            const viewHeight = outerHeight * rowSpan;\r\n            this.setState(\r\n                {\r\n                    ...additionalState,\r\n                    outerWidth,\r\n                    outerHeight,\r\n                    viewWidth,\r\n                    viewHeight,\r\n                    width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n                    height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n                },\r\n                this.onResize\r\n            );\r\n        }\r\n    }\r\n\r\n    increaseRows = () => {\r\n        const { rowSpan, rowlimit, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan >= rowlimit) { return; }\r\n        const newSpan = rowSpan + 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseRows = () => {\r\n        const { rowSpan, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan <= 1) { return; }\r\n        const newSpan = rowSpan - 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    increaseColumns = () => {\r\n        const { columnSpan, columnLimit, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan >= columnLimit) { return; }\r\n        const newSpan = columnSpan + 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseColumns = () => {\r\n        const { columnSpan, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan <= 1) { return; }\r\n        const newSpan = columnSpan - 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    close = () => {\r\n        const { toggleView, name } = this.props;\r\n        if (toggleView && name) {\r\n            toggleView(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the HTML (JSX) for the view size control buttons\r\n     */\r\n    getSizeControlHTML = () => (\r\n        <div className='sizeControl'>\r\n            {this.state.canResizeRows && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseRows\r\n                        }\r\n                        title={'Increase rows'}\r\n                        disabled={this.state.rowSpan >= this.state.rowlimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltV} />\r\n                    </button >\r\n                    <button\r\n                        onClick={this.decreaseRows}\r\n                        title={'Decrease rows'}\r\n                        disabled={this.state.rowSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltUp} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            {this.state.canResizeColumns && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseColumns}\r\n                        title={'Increase columns'}\r\n                        disabled={this.state.columnSpan >= this.state.columnLimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltH} />\r\n                    </button>\r\n                    <button\r\n                        onClick={this.decreaseColumns}\r\n                        title={'Decrease columns'}\r\n                        disabled={this.state.columnSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltLeft} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            <button\r\n                onClick={this.close}\r\n                title={'Close'}\r\n            >\r\n                <FontAwesomeIcon icon={faTimesCircle} />\r\n            </button>\r\n        </div >\r\n    );\r\n}\r\n","import { Utils } from \"musicvis-lib\";\nimport { curveMonotoneX, curveLinear, line } from \"d3-shape\";\nimport { scaleLinear } from \"d3-scale\";\nimport { extent, max } from \"d3-array\";\n\n\n/**\n * Sets up a canvas rescaled to device pixel ratio\n * From https://www.html5rocks.com/en/tutorials/canvas/hidpi/\n * @param {HTMLCanvasElement} canvas canvas element\n * @returns {CanvasRenderingContext2D} canvas rendering context\n */\nexport function setupCanvas(canvas) {\n    // Get the device pixel ratio, falling back to 1.\n    var dpr = window.devicePixelRatio || 1;\n    // Get the size of the canvas in CSS pixels.\n    var rect = canvas.getBoundingClientRect();\n    // Give the canvas pixel dimensions of their CSS\n    // Size times the device pixel ratio.\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    var ctx = canvas.getContext('2d');\n    // Scale all drawing operations by the dpr, so you\n    // don't have to worry about the difference.\n    ctx.scale(dpr, dpr);\n    return ctx;\n}\n\n\n/**\n * Draws horizontal bands with alternating color to better distinguish rows.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} rowHeight height of bnote boxes\n */\nexport function drawRowBands(ctx, margin, rows, rowHeight, width, fillStyle = 'rgba(128, 128, 128, 0.1)') {\n    const oldFill = ctx.fillStyle;\n    ctx.fillStyle = fillStyle;\n    const xPos = margin.left;\n    for (let i = 0; i < rows; i += 2) {\n        const yPos = margin.top + rowHeight * i;\n        ctx.fillRect(xPos, yPos, width, rowHeight);\n    }\n    ctx.fillStyle = oldFill;\n}\n\n/**\n * Draws a bar chart.\n * @param {CanvasRenderingContext2D} ctx canvas context\n * @param {number} x x position\n * @param {number} y y position\n * @param {number} width width\n * @param {number} height height\n * @param {number} maxVal maximum value towards the chart values are scaled\n * @param {number[]} values values to draw bars for\n * @param {string[]} colors color for each value entry\n */\nexport function drawBarChart(ctx, x, y, width, height, maxVal, values, colors) {\n    const w = width / values.length;\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        ctx.fillStyle = colors[i];\n        const h = (value / maxVal) * height;\n        const yPos = y + height - h;\n        ctx.fillRect(x + i * w, yPos, w - 2, h);\n    }\n}\n\n/**\n * Draws a stacked bar chart.\n * @param {CanvasRenderingContext2D} ctx canvas context\n * @param {number} x x position\n * @param {number} y y position\n * @param {number} width width\n * @param {number} height height\n * @param {number} maxVal maximum value towards the chart values are scaled\n * @param {number[]} values values to draw bars for\n * @param {string[]} colors color for each value entry\n */\nexport function drawStackedBarChart(ctx, x, y, width, height, maxVal, values, colors) {\n    let currentSum = 0;\n    // Stack values\n    for (let i = values.length - 1; i >= 0; i--) {\n        currentSum += values[i];\n        values[i] = currentSum;\n    }\n    for (let i = 0; i < values.length; i++) {\n        const val = values[i];\n        ctx.fillStyle = colors[i];\n        const h = (val / maxVal) * height;\n        const yPos = y + height - h;\n        ctx.fillRect(x, yPos, width, h);\n    }\n}\n\n/**\n * Draws a horizontal boxplot onto a canvas.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} drawOutliers if true, outliers will be drawn as dots\n * @param {string} fillBox color for the box\n * @param {string} fillWhisk color for the whiskers\n */\nexport function drawBoxplot(\n    ctx,\n    margin,\n    x,\n    yPos,\n    plotHeight,\n    data,\n    drawOutliers = false,\n    fillBox = 'rgba(70, 130, 180, 0.8)',\n    fillWhisk = 'steelblue'\n) {\n    const { q1, q2, q3, r0, r1 } = Utils.getBoxplotCharacteristics(data);\n    // Get positions\n    const q1Pos = margin.left + x(q1);\n    const q2Pos = margin.left + x(q2);\n    const q3Pos = margin.left + x(q3);\n    const r0Pos = margin.left + x(r0);\n    const r1Pos = margin.left + x(r1);\n    const yCenter = yPos + plotHeight / 2;\n    // Box (with a gap for the median)\n    ctx.fillStyle = fillBox;\n    ctx.fillRect(q1Pos, yPos, q2Pos - q1Pos - 1, plotHeight);\n    ctx.fillRect(q2Pos + 1, yPos, q3Pos - q2Pos - 1, plotHeight);\n    ctx.fillStyle = fillWhisk;\n    // Left whisker\n    ctx.fillRect(r0Pos, yPos, 1, plotHeight);\n    ctx.fillRect(r0Pos, yCenter, q1Pos - r0Pos, 1);\n    // Right whisker\n    ctx.fillRect(r1Pos, yPos, 1, plotHeight);\n    ctx.fillRect(q3Pos, yCenter, r1Pos - q3Pos, 1);\n    // Draw outliers\n    if (drawOutliers) {\n        const outliers = data.filter(d => d < r0 || d > r1);\n        for (let ol of outliers) {\n            ctx.fillRect(margin.left + x(ol), yCenter, 2, 2);\n        }\n    }\n}\n\n/**\n * Draws a kernel density estimation (KDE) area chart for each pitch.\n * TODO: draw mean and quartiles like in a box plot\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} smooth turn smoothing on and off\n * @param {string} fillStyle fill color\n * @param {number} bandwidth kernel bandwidth\n * @param {number} ticks number of ticks for which to compute a curve point\n */\nexport function drawKdeAreaChart(ctx, margin, x, yPos, plotHeight, data, smooth = true, fillStyle, bandwidth = 0.5, ticks = 100) {\n    const kde = Utils.kernelDensityEstimator(Utils.kernelEpanechnikov(bandwidth), x.ticks(ticks));\n    const estimate = kde(data);\n    // Force 0 for y value at start and end for correct drawing\n    estimate.unshift([estimate[0][0], 0]);\n    estimate.push([estimate[estimate.length - 1][0], 0]);\n    const y = scaleLinear()\n        .domain(extent(estimate, d => d[1]))\n        .range([yPos + plotHeight, yPos]);\n    // Smoothed or linearly interpolated area\n    const lineGenerator = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    ctx.beginPath();\n    lineGenerator(estimate);\n    ctx.closePath();\n    ctx.fillStyle = fillStyle;\n    ctx.fill();\n}\n\n/**\n * Draws a violinplot (a mirrored KDE area chart).\n * TODO: draw mean and quartiles like in a box plot\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} smooth turn smoothing on and off\n * @param {string} fillStyle fill color\n * @param {number} bandwidth kernel bandwidth\n * @param {number} ticks number of ticks for which to compute a curve point\n */\nexport function drawViolinPlot(ctx, margin, x, yPos, plotHeight, data, smooth = true, fillStyle, bandwidth = 0.5, ticks = 100) {\n    const kde = Utils.kernelDensityEstimator(Utils.kernelEpanechnikov(bandwidth), x.ticks(ticks));\n    const estimate = kde(data);\n    // Force 0 for y value at start and end for correct drawing\n    estimate.unshift([estimate[0][0], 0]);\n    estimate.push([estimate[estimate.length - 1][0], 0]);\n    const maxEst = max(estimate, d => d[1]);\n    const y = scaleLinear()\n        .domain([-maxEst, maxEst])\n        .range([yPos + plotHeight, yPos]);\n    // Smoothed or linearly interpolated area\n    const lineGeneratorTop = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    const lineGeneratorBottom = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(-d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    ctx.fillStyle = fillStyle;\n    ctx.beginPath();\n    lineGeneratorTop(estimate);\n    ctx.closePath();\n    ctx.fill();\n    ctx.beginPath();\n    lineGeneratorBottom(estimate);\n    ctx.closePath();\n    ctx.fill();\n}\n\n\n/**\n  * Draws a drum note shape to the canvas.\n  * @param {CanvasRenderingContext2D} ctx canvas context\n  * @param {string} shape one of [triangle, <>, x, o, ostroke, xstroke]\n  * @param {number} x x position\n  * @param {number} y y position\n  * @param {number} size size (width and height of the symbols outer bounds)\n  */\nexport function drawDrumNoteShape(ctx, shape, x, y, size) {\n    const halfSize = size * 0.4;\n    switch (shape) {\n        case 'triangle':\n            drawTriangle(ctx, x, y, halfSize);\n            break;\n        case '<>':\n            drawDiamond(ctx, x, y, halfSize);\n            break;\n        case 'x':\n            drawX(ctx, x, y, halfSize);\n            break;\n        case 'o':\n            drawFilledCircle(ctx, x, y, halfSize);\n            break;\n        case 'ostroke':\n            drawFilledCircle(ctx, x, y, halfSize);\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(x - halfSize, y - halfSize);\n            ctx.lineTo(x + halfSize, y + halfSize);\n            ctx.stroke();\n            ctx.lineWidth = 1;\n            break;\n        case 'xstroke':\n            drawX(ctx, x, y, halfSize);\n            ctx.lineWidth = 3;\n            ctx.beginPath();\n            ctx.moveTo(x - halfSize, y);\n            ctx.lineTo(x + halfSize, y);\n            ctx.stroke();\n            ctx.lineWidth = 1;\n            break;\n        default:\n            console.warn(`Unsupported shape ${shape}`);\n    }\n}\n\n/**\n * Draws a stroked circle.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} radius radius\n */\nexport function drawCircle(ctx, x, y, radius) {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n}\n\n/**\n * Draws a filled circle.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} radius radius\n */\nexport function drawFilledCircle(ctx, x, y, radius) {\n    if (radius < 0) {\n        console.error(`Cannot draw circle with negative radius of ${radius}`);\n    }\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\n    ctx.fill();\n}\n\n/**\n * Draws a filled triangle like this: /\\\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawTriangle(ctx, x, y, halfSize) {\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y + halfSize);\n    ctx.lineTo(x + halfSize, y + halfSize);\n    ctx.lineTo(x, y - halfSize);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a diamond like this: <>\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawDiamond(ctx, x, y, halfSize) {\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y);\n    ctx.lineTo(x, y - halfSize);\n    ctx.lineTo(x + halfSize, y);\n    ctx.lineTo(x, y + halfSize);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws an X\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawX(ctx, x, y, halfSize) {\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y - halfSize);\n    ctx.lineTo(x + halfSize, y + halfSize);\n    ctx.moveTo(x - halfSize, y + halfSize);\n    ctx.lineTo(x + halfSize, y - halfSize);\n    ctx.stroke();\n    ctx.lineWidth = 1;\n}\n\n/**\n * Draws a trapezoid that looks like a rectangle but gets narrower at the right\n * end, so better show where one ends and the next begins.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of top left\n * @param {number} y y coordinate of top left\n * @param {number} width width\n * @param {number} height height (of left side)\n * @param {number} height2 height (of right side)\n */\nexport function drawNoteTrapezoid(ctx, x, y, width, height, height2) {\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x, y + height);\n    ctx.lineTo(x + width, y + (height / 2 + height2 / 2));\n    ctx.lineTo(x + width, y + (height / 2 - height2 / 2));\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a trapezoid that looks like a rectangle but gets narrower at the top\n * end, so better show where one ends and the next begins.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of bounding rect's top left\n * @param {number} y y coordinate of bounding rect's top left\n * @param {number} width width (of bounding rect / bottom side)\n * @param {number} height height\n * @param {number} width2 width (of top side)\n */\nexport function drawNoteTrapezoidUpwards(ctx, x, y, width, height, width2) {\n    ctx.beginPath();\n    ctx.lineTo(x, y + height);\n    ctx.lineTo(x + width, y + height);\n    ctx.lineTo(x + (width / 2 + width2 / 2), y);\n    ctx.lineTo(x + (width / 2 - width2 / 2), y);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws an arc that connects similar parts.\n * Both parts must have the same width in pixels.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} startX1 x coordinate of the start of the first part\n * @param {number} startX2 x coordinate of the start of the second part\n * @param {number} length length in pixels of the parts\n * @param {number} yBottom bottom baseline y coordinate\n */\nexport function drawArc(ctx, startX1, startX2, length, yBottom) {\n    // Get center and radius\n    const radius = (startX2 - startX1) / 2;\n    const cx = startX1 + radius + length / 2;\n    ctx.lineWidth = length;\n    ctx.beginPath();\n    ctx.arc(cx, yBottom, radius, Math.PI, 2 * Math.PI);\n    ctx.stroke();\n}\n\n/**\n * Draws a more complex path and fills it.\n * Two arcs: One from startX1 to endX2 on the top, one from endX1 to startX2\n * below it.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} startX1 x coordinate of the start of the first part\n * @param {number} endX1 x coordinate of the end of the first part\n * @param {number} startX2 x coordinate of the start of the second part\n * @param {number} endX2 x coordinate of the end of the second part\n * @param {number} endX2 x coordinate of the end of the second part\n * @param {number} yBottom bottom baseline y coordinate\n */\nexport function drawAssymetricArc(ctx, startX1, endX1, startX2, endX2, yBottom) {\n    // Get center and radius\n    const radiusTop = (endX2 - startX1) / 2;\n    if (radiusTop < 0) {\n        return;\n    }\n    let radiusBottom = (startX2 - endX1) / 2;\n    if (radiusBottom < 0) {\n        radiusBottom = 0;\n    }\n    const cxTop = startX1 + radiusTop;\n    const cxBottom = endX1 + radiusBottom;\n    ctx.beginPath();\n    ctx.moveTo(startX1, yBottom);\n    ctx.arc(cxTop, yBottom, radiusTop, Math.PI, 2 * Math.PI);\n    ctx.lineTo(startX2, yBottom);\n    ctx.arc(cxBottom, yBottom, radiusBottom, 2 * Math.PI, Math.PI, true);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a line indicating the current player time\n * @param {number} currentPlayerTime current player time in seconds\n * @param {Function} x D3 scaleLinear for x axis\n */\nexport function drawCurrentTimeIndicator(ctx, currentPlayerTime, x, height, margin) {\n    if (currentPlayerTime === null) {\n        return;\n    }\n    const xPos = margin.left + x(currentPlayerTime) - 1;\n    ctx.fillRect(xPos, margin.top, 2, height);\n}\n\n/**\n * Clips left and right of a visualization by clearing parts of the canvas.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin {top, right, bottom, left}\n * @param {number} width width of the area to clip around\n * @param {number} height height of the clipping area\n */\nexport function clipLeftRight(ctx, margin, width, height) {\n    ctx.clearRect(0, margin.top, margin.left, height);\n    ctx.clearRect(margin.left + width, margin.top, margin.right, height);\n}\n\n/**\n * Draws measure lines and tempo and beat type information\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} parsedXml parsed MusicXML data\n * @param {Object} margin {top, right, bottom, left}\n * @param {number} width width\n * @param {number} height height\n * @param {Function} x D3 linear scale\n */\nexport function drawMusicXmlInformation(ctx, parsedXml, margin, width, height, x) {\n    // Draw measure lines\n    ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\n    for (let i = 0; i < parsedXml.measureLinePositions.length; i++) {\n        const line = parsedXml.measureLinePositions[i];\n        const xPos = x(line);\n        // Do not draw invisible lines\n        if (xPos < 0) { continue; }\n        if (xPos > width) { break; }\n        const pos = margin.left + xPos;\n        ctx.fillRect(pos, margin.top, 2, height);\n        // Draw measure number\n        if ((i + 2) % 4 === 0) {\n            ctx.fillStyle = '#888';\n            ctx.fillText(i + 2, pos + 10, margin.top);\n            ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\n        }\n    }\n    const xOffs = margin.left + 15;\n    ctx.fillStyle = '#888';\n    // Draw tempo changes\n    for (let t of parsedXml.tempoChanges) {\n        ctx.fillText(`${t.tempo} bpm`, xOffs + x(t.time), margin.top - 20);\n    }\n    // Draw beatType changes\n    for (let b of parsedXml.beatTypeChanges) {\n        ctx.fillText(`${b.beats} / ${b.beatType}`, xOffs + x(b.time), margin.top - 8);\n    }\n}\n","import React from 'react';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { extent } from 'd3-array';\r\nimport { axisBottom, axisLeft } from 'd3-axis';\r\nimport { select } from 'd3-selection';\r\nimport View from '../lib/ui/View';\r\nimport { Utils, Midi } from 'musicvis-lib';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\nimport { drawNoteTrapezoid, setupCanvas, clipLeftRight } from '../lib/ui/Graphics';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default class PitchTimeChart extends View {\r\n\r\n    constructor(props) {\r\n        const margin = { top: 35, right: 20, bottom: 40, left: 55 };\r\n        super(props, margin);\r\n        this.state = {\r\n            ...this.state,\r\n            overviewHeight: 80,\r\n            showAllTime: false,\r\n            selectedTrack: 'all',\r\n            // pitch, note, drums\r\n            yAxisLabelType: 'pitch',\r\n            boxHeight: null,\r\n            notes: [],\r\n            liveNotes: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => this.initialize();\r\n\r\n    onResize = () => this.initialize();\r\n\r\n    componentDidUpdate() {\r\n        this.resizeComponent();\r\n        if (this.state.initialized) {\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    initialize = () => {\r\n        const { width, height, overviewHeight, yAxisLabelType } = this.state;\r\n        const svg = select(this.svg);\r\n        svg.selectAll('*').remove();\r\n        // Scales\r\n        const x = scaleLinear().range([2, width]);\r\n        const xOv = scaleLinear().range([2, width]);\r\n        const y = scaleLinear().range([height, overviewHeight + 25]);\r\n        const yOv = scaleLinear().range([overviewHeight, 0]);\r\n        // Axes\r\n        const xAxis = axisBottom(x);\r\n        const yAxis = axisLeft(y);\r\n        if (yAxisLabelType === 'note') {\r\n            yAxis.tickFormat(d => Midi.getMidiNoteByNr(d)?.label);\r\n        }\r\n        const xAxisEl = svg.append('g')\r\n            .attr('class', 'axis')\r\n            .attr('transform', `translate(0, ${height})`)\r\n            .call(xAxis);\r\n        const yAxisEl = svg.append('g')\r\n            .attr('class', 'axis')\r\n            .call(yAxis);\r\n        // Labels\r\n        svg.append('text')\r\n            .attr('class', 'yAxisLabel')\r\n            .text('Pitch')\r\n            .attr('transform', `rotate(90) translate(${(height + overviewHeight) / 2}, ${45})`);\r\n        // Setup canvas rescaled to device pixel ratio\r\n        setupCanvas(this.canvas);\r\n        setupCanvas(this.highlightCanvas);\r\n        this.setState({ initialized: true, svg, x, xOv, y, yOv, xAxis, yAxis, xAxisEl, yAxisEl });\r\n    }\r\n\r\n    /**\r\n     * Draws the note retangles.\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     * @param {Notes[]} notes notes with start, end, pitch\r\n     * @param {number} boxHeight height of each pitch-line\r\n     * @param {Function} x D3 linearScale x scale\r\n     * @param {Function} y D3 linearScale y scale\r\n     */\r\n    drawNotes = (ctx, notes, boxHeight, x, y) => {\r\n        const { width, margin } = this.state;\r\n        const veloScale = scaleLinear()\r\n            .domain([0, 127])\r\n            .range([boxHeight * 0.1, boxHeight]);\r\n        for (let note of notes) {\r\n            const startPos = x(note.start);\r\n            const endPos = x(note.end);\r\n            // Do not draw invisible notes\r\n            if (endPos < 0 || startPos > width) {\r\n                continue;\r\n            }\r\n            const xPos = margin.left + startPos;\r\n            // TODO: encode velocity in height?\r\n            const h = veloScale(note.velocity);\r\n            const yPos = margin.top + y(note.pitch) - h / 2;\r\n            const w = Math.max(endPos - startPos, 1);\r\n            drawNoteTrapezoid(ctx, xPos, yPos, w, h, h / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main drawing function\r\n     */\r\n    draw = () => {\r\n        const { viewWidth, viewHeight, margin, width, height, overviewHeight, x, xOv, y, yOv, xAxis, yAxis, xAxisEl, yAxisEl, selectedTrack, showAllTime } = this.state;\r\n        const { midiFileData, timeSelection } = this.props;\r\n        // Prepare main and highlight canvas\r\n        const ctx = this.canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, viewWidth, viewHeight);\r\n        const ctx2 = this.highlightCanvas.getContext('2d');\r\n        ctx2.clearRect(0, 0, viewWidth, viewHeight);\r\n\r\n        // Get notes\r\n        let track;\r\n        let allNotes = [];\r\n        if (midiFileData && midiFileData.length > 0) {\r\n            if (selectedTrack === 'all') {\r\n                // Show all tracks\r\n                allNotes = Utils.flattenArray(midiFileData);\r\n            } else {\r\n                // Show selected track\r\n                track = Math.min(selectedTrack, midiFileData.length - 1);\r\n                allNotes = midiFileData[track];\r\n            }\r\n\r\n        }\r\n        if (allNotes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Set x scale domain\r\n        const [start, end] = extent(allNotes, d => d.end);\r\n        const xDomain = [start < 0 ? start : 0, end];\r\n        xOv.domain(xDomain);\r\n        if (showAllTime) {\r\n            // Show all notes\r\n            x.domain(xDomain);\r\n        } else {\r\n            let interval = [0, end];\r\n            if (timeSelection) {\r\n                interval = timeSelection;\r\n            }\r\n            x.domain(interval);\r\n        }\r\n        xAxisEl.call(xAxis);\r\n        // Set y scale domain\r\n        const [low, high] = extent(allNotes, d => d.pitch);\r\n        y.domain([+low - 1, +high + 1]);\r\n        yOv.domain([+low - 1, +high + 1]);\r\n        yAxisEl.call(yAxis);\r\n        // If only one track, use color for channels\r\n        // and allow to only show a single channel\r\n        let tracks = selectedTrack === 'all' ? midiFileData : [midiFileData[track]];\r\n\r\n        // Draw background bands and measure lines\r\n        this.drawRowBandsForSharps(ctx, margin, y, low, high, width, 'rgba(128, 128, 128, 0.15)');\r\n        this.drawMeasures(ctx);\r\n\r\n        // Draw notes onto canvas\r\n        const colors = schemeCategory10;\r\n        const boxHeight = height / (high - low + 3);\r\n        const boxHeight2 = overviewHeight / (high - low + 1);\r\n        tracks.forEach((tr, i) => {\r\n            ctx.fillStyle = colors[i % colors.length];\r\n            this.drawNotes(ctx, tr, boxHeight, x, y);\r\n            this.drawNotes(ctx, tr, boxHeight2, xOv, yOv);\r\n        });\r\n\r\n        // Separator between overview and main visualization\r\n        ctx.fillStyle = '#888';\r\n        ctx.fillRect(margin.left, margin.top + overviewHeight + 12, width, 1);\r\n        clipLeftRight(ctx, margin, width, height);\r\n\r\n        // Draw time selection and similar sections\r\n        if (timeSelection) {\r\n            const [start, end] = timeSelection;\r\n            this.drawTimeSelection(ctx2, start, end, 'rgba(70, 130, 180, 0.2)');\r\n        }\r\n        // Draw current player time\r\n        this.drawCurrentPlayerTime(ctx2);\r\n    }\r\n\r\n    /**\r\n     * Draws horizontal bands with alternating color to better distinguish rows.\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     */\r\n    drawRowBandsForSharps = (ctx, margin, y, low, high, width, fillStyle = 'rgba(128, 128, 128, 0.1)') => {\r\n        const oldFill = ctx.fillStyle;\r\n        ctx.fillStyle = fillStyle;\r\n        const rowHeight = y(0) - y(1);\r\n        const xPos = margin.left;\r\n        for (let pitch = low - 1; pitch <= high + 1; pitch++) {\r\n            // Only draw for shaprs\r\n            if (Midi.isSharp(pitch)) {\r\n                const yPos = margin.top + y(pitch) - rowHeight / 2;\r\n                ctx.fillRect(xPos, yPos, width, rowHeight);\r\n            }\r\n        }\r\n        ctx.fillStyle = oldFill;\r\n    }\r\n\r\n    /**\r\n     * Draws measure lines (not on the overview)\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     */\r\n    drawMeasures = (ctx) => {\r\n        const { xmlFileData, selectedTrack } = this.props;\r\n        const { margin, width, height, overviewHeight, x } = this.state;\r\n        if (!xmlFileData) { return; }\r\n        const part = xmlFileData.parts[selectedTrack === 'all' ? 0 : selectedTrack];\r\n        ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\r\n        const yPos = margin.top + overviewHeight + 20;\r\n        const h = height - overviewHeight - 20;\r\n        for (let p of part.measureLinePositions) {\r\n            const pos = x(p);\r\n            if (pos <= 0 || pos > width) { continue; }\r\n            ctx.fillRect(margin.left + pos, yPos, 1, h);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the current player time (from props) onto the highlight canvas.\r\n     */\r\n    drawCurrentPlayerTime = (ctx) => {\r\n        const { margin, height, overviewHeight, x, xOv } = this.state;\r\n        const { currentPlayerTime } = this.props;\r\n        if (currentPlayerTime === null) { return; }\r\n        ctx.fillStyle = 'steelblue';\r\n        ctx.fillRect(margin.left + xOv(currentPlayerTime), margin.top, 2, overviewHeight);\r\n        ctx.fillRect(margin.left + x(currentPlayerTime), margin.top + overviewHeight + 25, 2, height - overviewHeight - 25);\r\n    }\r\n\r\n    /**\r\n     * Draws the current time selection (from props) onto the highlight canvas.\r\n     */\r\n    drawTimeSelection = (ctx, start, end, fill) => {\r\n        const { margin, height, overviewHeight, x, xOv } = this.state;\r\n        ctx.fillStyle = fill;\r\n        const xOv1 = margin.left + xOv(start);\r\n        const xOv2 = margin.left + xOv(end);\r\n        ctx.fillRect(xOv1, margin.top, xOv2 - xOv1, overviewHeight);\r\n        const x1 = margin.left + x(start);\r\n        const x2 = margin.left + x(end);\r\n        ctx.fillRect(x1, margin.top + overviewHeight + 25, x2 - x1, height - overviewHeight - 25);\r\n    }\r\n\r\n    /**\r\n     * Sets the new player start time\r\n     * @param {MouseEvent} e React onClick event\r\n     */\r\n    handleBrushed = (e) => {\r\n        const { margin, overviewHeight, xOv, brushStartEvent } = this.state;\r\n        const { setTimeSelection } = this.props;\r\n        if (!e || !brushStartEvent) { return; }\r\n        const { offsetX: startX, offsetY: startY } = brushStartEvent;\r\n        const { offsetX: endX } = e.nativeEvent;\r\n        // See if start position is in overview\r\n        if (startY < margin.top || startY > margin.top + overviewHeight) {\r\n            return;\r\n        }\r\n        // Get time\r\n        let startTime = xOv.invert(startX - margin.left);\r\n        let endTime = xOv.invert(endX - margin.left);\r\n        // Clip to domain\r\n        const [minTime, maxTime] = xOv.domain();\r\n        startTime = Utils.clipValue(startTime, minTime, maxTime);\r\n        endTime = Utils.clipValue(endTime, minTime, maxTime);\r\n        const sorted = Utils.swapSoSmallerFirst(startTime, endTime);\r\n        // Make selection at least 1 second wide\r\n        if (sorted[1] - sorted[0] < 1) {\r\n            sorted[1] = sorted[0] + 1;\r\n        }\r\n        // Set selection in App.js\r\n        setTimeSelection(sorted);\r\n    }\r\n\r\n    render() {\r\n        const { viewWidth, viewHeight, margin } = this.state;\r\n        const { midiFileData, selectedTrack } = this.props;\r\n        // HTML\r\n        return (\r\n            <div\r\n                className='View PitchTimeChart'\r\n                style={{ gridArea: `span ${this.state.rowSpan} / span ${this.state.columnSpan}` }}\r\n            >\r\n                <canvas\r\n                    className='ViewCanvas'\r\n                    ref={n => this.canvas = n}\r\n                    style={{ width: viewWidth, height: viewHeight }}\r\n                    onMouseDownCapture={(e) => this.setState({ brushStartEvent: e.nativeEvent })}\r\n                    onMouseUpCapture={this.handleBrushed}\r\n                />\r\n                <canvas\r\n                    className='ViewCanvas HighlightCanvas'\r\n                    ref={n => this.highlightCanvas = n}\r\n                    style={{ width: viewWidth, height: viewHeight }}\r\n                />\r\n                <svg\r\n                    width={viewWidth}\r\n                    height={viewHeight}\r\n                >\r\n                    <text\r\n                        className='heading'\r\n                        x={viewWidth / 2}\r\n                        y={20}\r\n                    >\r\n                        MIDI Piano Roll\r\n                    </text>\r\n                    <g\r\n                        ref={n => this.svg = n}\r\n                        transform={`translate(${margin.left}, ${margin.top})`}\r\n                    />\r\n                    <text\r\n                        className='yAxisLabel'\r\n                        x={viewWidth / 2}\r\n                        y={viewHeight - 5}\r\n                    >\r\n                        Time in seconds\r\n                    </text>\r\n                </svg>\r\n                <div className='viewControls'>\r\n                    <select\r\n                        title='MIDI track(s)'\r\n                        onChange={(e) => this.setState({ selectedTrack: e.target.value })}\r\n                        disabled={midiFileData.length > 1 && selectedTrack === 'all'}\r\n                    >\r\n                        <option key='all' value='all'>All tracks</option>\r\n                        {new Array(midiFileData.length).fill(0).map((_, i) => (\r\n                            <option\r\n                                key={i}\r\n                                value={i}\r\n                                style={{ background: schemeCategory10[i % schemeCategory10.length] }}\r\n                            >\r\n                                Track {i}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <select\r\n                        title='Y-axis labels'\r\n                        onChange={(e) => this.setState({ yAxisLabelType: e.target.value }, this.initialize)}\r\n                    >\r\n                        <option value='pitch'>MIDI note</option>\r\n                        <option value='note'>Note name</option>\r\n                    </select>\r\n                    <button\r\n                        title='Toggles between showing the whole time or a selection in the lower part'\r\n                        onClick={() => this.setState({ showAllTime: !this.state.showAllTime })}\r\n                    >\r\n                        <FontAwesomeIcon icon={this.state.showAllTime ? faToggleOn : faToggleOff} />&nbsp;\r\n                        Show whole time\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './style/App.css';\nimport MidiParser from 'midi-parser-js';\nimport PitchTimeChart from './components/PitchTimeChart';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { preprocessMidiFileData } from 'musicvis-lib';\n\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewSize: {\n        outerWidth: 800,\n        outerHeight: 600\n      },\n      midiFileData: [],\n      timeSelection: null\n    };\n  }\n\n  componentDidMount() {\n    // Scale layout to current screen size\n    window.addEventListener('resize', this.onResize, false);\n    this.onResize();\n\n    // select the INPUT element that will handle\n    // the file selection.\n    let source = document.getElementById('filereader');\n    // provide the File source and a callback function\n    const _this = this;\n    MidiParser.parse(source, function (obj) {\n      try {\n        const parsed = preprocessMidiFileData(obj);\n        const parts = parsed.parts.map(d => d.noteObjs);\n        _this.setState({ midiFileData: parts });\n      } catch (e) {\n        alert('Invalid MIDI file or wrong format!');\n      }\n    });\n  }\n\n  /**\n   * Updates the size state when the window size changes\n   * so views can react and redraw\n   */\n  onResize = () => {\n    this.setState({\n      viewSize: {\n        outerWidth: Math.floor(window.innerWidth - 20),\n        outerHeight: Math.floor(window.innerHeight - 200)\n      }\n    });\n  }\n\n  /**\n   * Changes the current time selection\n   * @param {number[]} timeSelection [start, end] in seconds\n   */\n  setTimeSelection = (timeSelection) => {\n    this.setState({ timeSelection, similarSections: [] });\n  };\n\n  render() {\n    const s = this.state;\n    return (\n      <div className={`App dark`} >\n        <div className='fileSelection'>\n          <input\n            className='fileInput'\n            type='file'\n            id='filereader'\n          />\n        </div>\n        <PitchTimeChart\n          name='Note-Time Chart'\n          viewSize={s.viewSize}\n          midiFileData={s.midiFileData}\n          timeSelection={s.timeSelection}\n          setTimeSelection={this.setTimeSelection}\n        />\n        <div className='githubLink'>\n          <a href='https://github.com/fheyen/midi-pianoroll'>\n            <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/midi-pianoroll\n                    </a>\n        </div>\n      </div >\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}