{"version":3,"sources":["lib/ui/View.js","lib/ui/Graphics.js","lib/Midi.js","lib/utils/MathUtils.js","components/PitchTimeChart.js","lib/utils/ArrayUtils.js","types/Note.js","lib/MidiParser.js","App.js","index.js"],"names":["View","PureComponent","constructor","props","margin","top","right","bottom","left","rowSpan","columnSpan","canResizeRows","canResizeColumns","super","onResize","increaseRows","this","state","rowlimit","outerHeight","viewSize","newSpan","viewHeight","setState","height","decreaseRows","increaseColumns","columnLimit","outerWidth","viewWidth","width","decreaseColumns","close","toggleView","name","getSizeControlHTML","className","onClick","title","disabled","icon","faArrowsAltV","faLongArrowAltUp","faArrowsAltH","faLongArrowAltLeft","faTimesCircle","resizeComponent","additionalState","ow","oh","setupCanvas","canvas","dpr","window","devicePixelRatio","rect","getBoundingClientRect","ctx","getContext","scale","drawNoteTrapezoid","x","y","height2","beginPath","moveTo","lineTo","closePath","fill","MidiNoteByPitch","Map","MidiNoteByLabel","MidiInstrumentByNumber","MidiInstrumentByNumberLev2","getMidiNoteByNr","nr","get","isSharp","SHARPS","has","MIDI_NOTES","pitch","octave","label","frequency","MIDI_INSTRUMENTS","number","group","MIDI_INSTRUMENTS_Lev2","subnumber","note","set","instrument","key","clipValue","value","minValue","maxValue","Math","max","min","PitchTimeChart","componentDidMount","initialize","overviewHeight","yAxisLabelType","svg","select","selectAll","remove","scaleLinear","range","xOv","yOv","xAxis","axisBottom","yAxis","axisLeft","tickFormat","d","xAxisEl","append","attr","call","yAxisEl","text","highlightCanvas","initialized","drawNotes","notes","boxHeight","veloScale","domain","startPos","start","endPos","end","xPos","h","velocity","draw","selectedTrack","showAllTime","midiFileData","timeSelection","clearRect","ctx2","track","allNotes","length","array","concat","flattenArray","extent","xDomain","interval","low","high","tracks","drawRowBandsForSharps","drawMeasures","colors","schemeCategory10","boxHeight2","forEach","tr","i","fillStyle","fillRect","clipLeftRight","drawTimeSelection","drawCurrentPlayerTime","oldFill","rowHeight","yPos","xmlFileData","part","parts","p","measureLinePositions","pos","currentPlayerTime","xOv1","xOv2","x1","x2","handleBrushed","e","brushStartEvent","setTimeSelection","startX","offsetX","startY","offsetY","endX","nativeEvent","startTime","invert","endTime","minTime","maxTime","sorted","swapSoSmallerFirst","liveNotes","componentDidUpdate","render","style","gridArea","ref","n","onMouseDownCapture","onMouseUpCapture","transform","onChange","target","Array","map","_","background","faToggleOn","faToggleOff","Note","channel","object","undefined","console","error","clone","getDuration","getName","getLetter","getOctave","shiftTime","addedSeconds","scaleTime","factor","equals","otherNote","bpmToSecondsPerBeat","bpm","preprocessMidiFileData","data","splitFormat0IntoTracks","warn","groupCollapsed","parsedTracks","partNames","tempoChanges","beatTypeChanges","currentTick","event","deltaTime","type","metaType","milliSecondsPerQuarter","tempo","round","push","tick","beats","beatType","pow","time","getMidiTempoAndBeatChanges","t","parseMidiTrack","timeDivision","getPartName","formatType","log","grouped","noteObjs","splittedTracks","channelId","splitFormat0","result","instruments","totalTime","groupEnd","currentTime","milliSecondsPerTick","getMillisecondsPerTick","tickOfLastTempoChange","timeOfLastTempoChange","mostRecentTempoChange","btc","toFixed","measureLines","secondsPerBeat","currentBeatsInMeasure","timeSinceLastTempoChange","b","getMeasureLines","parsedTrack","App","Component","floor","innerWidth","innerHeight","similarSections","addEventListener","source","document","getElementById","_this","MidiParser","parse","obj","alert","s","id","href","faGithub","ReactDOM"],"mappings":"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","file":"static/js/main.6405f4ee.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowsAltH, faArrowsAltV, faLongArrowAltLeft, faLongArrowAltUp, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class View extends PureComponent {\r\n\r\n    /**\r\n     * @param {Props} props props\r\n     * @param {Obbject} margin margin\r\n     * @param {number} rowSpan number of rows this view initially has\r\n     * @param {number} colSpan number of columns this view initially has\r\n     * @param {boolean} canResizeRows allow to resize rows?\r\n     * @param {boolean} canResizeColumns allow to resize columns?\r\n     */\r\n    constructor(\r\n        props,\r\n        margin = { top: 0, right: 0, bottom: 0, left: 0 },\r\n        rowSpan = 1,\r\n        columnSpan = 1,\r\n        canResizeRows = true,\r\n        canResizeColumns = true,\r\n    ) {\r\n        super(props);\r\n        const { outerWidth, outerHeight } = props.viewSize;\r\n        const viewWidth = outerWidth * columnSpan;\r\n        const viewHeight = outerHeight * rowSpan;\r\n        this.state = {\r\n            rowSpan,\r\n            columnSpan,\r\n            canResizeRows,\r\n            canResizeColumns,\r\n            rowlimit: 12,\r\n            columnLimit: 2,\r\n            outerWidth,\r\n            outerHeight,\r\n            viewHeight,\r\n            viewWidth,\r\n            margin,\r\n            width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n            height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Views shoud overwrite this method,\r\n     * to react to resizing.\r\n     * This method is called by resizeComponent (see below).\r\n     */\r\n    onResize = () => { }\r\n\r\n    /**\r\n     * Resizes the component by updating the width and height depending on\r\n     * the received outerWidth and outerHeight props and the internal margin.\r\n     * After updating the state, the callback function will be called.\r\n     * @param {Object} component\r\n     * @param {Function} callback\r\n     * @param {Object} additionalState other properties to set in the state\r\n     */\r\n    resizeComponent(additionalState = {}) {\r\n        const { outerWidth, outerHeight } = this.props.viewSize;\r\n        const { outerWidth: ow, outerHeight: oh, margin, rowSpan, columnSpan } = this.state;\r\n        if (ow !== outerWidth || oh !== outerHeight) {\r\n            const viewWidth = outerWidth * columnSpan;\r\n            const viewHeight = outerHeight * rowSpan;\r\n            this.setState(\r\n                {\r\n                    ...additionalState,\r\n                    outerWidth,\r\n                    outerHeight,\r\n                    viewWidth,\r\n                    viewHeight,\r\n                    width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n                    height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n                },\r\n                this.onResize\r\n            );\r\n        }\r\n    }\r\n\r\n    increaseRows = () => {\r\n        const { rowSpan, rowlimit, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan >= rowlimit) { return; }\r\n        const newSpan = rowSpan + 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseRows = () => {\r\n        const { rowSpan, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan <= 1) { return; }\r\n        const newSpan = rowSpan - 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    increaseColumns = () => {\r\n        const { columnSpan, columnLimit, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan >= columnLimit) { return; }\r\n        const newSpan = columnSpan + 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseColumns = () => {\r\n        const { columnSpan, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan <= 1) { return; }\r\n        const newSpan = columnSpan - 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    close = () => {\r\n        const { toggleView, name } = this.props;\r\n        if (toggleView && name) {\r\n            toggleView(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the HTML (JSX) for the view size control buttons\r\n     */\r\n    getSizeControlHTML = () => (\r\n        <div className='sizeControl'>\r\n            {this.state.canResizeRows && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseRows\r\n                        }\r\n                        title={'Increase rows'}\r\n                        disabled={this.state.rowSpan >= this.state.rowlimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltV} />\r\n                    </button >\r\n                    <button\r\n                        onClick={this.decreaseRows}\r\n                        title={'Decrease rows'}\r\n                        disabled={this.state.rowSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltUp} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            {this.state.canResizeColumns && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseColumns}\r\n                        title={'Increase columns'}\r\n                        disabled={this.state.columnSpan >= this.state.columnLimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltH} />\r\n                    </button>\r\n                    <button\r\n                        onClick={this.decreaseColumns}\r\n                        title={'Decrease columns'}\r\n                        disabled={this.state.columnSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltLeft} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            <button\r\n                onClick={this.close}\r\n                title={'Close'}\r\n            >\r\n                <FontAwesomeIcon icon={faTimesCircle} />\r\n            </button>\r\n        </div >\r\n    );\r\n}\r\n","import { getBoxplotCharacteristics, kernelEpanechnikov, kernelDensityEstimator } from \"../utils/StatisticsUtils\";\nimport { curveMonotoneX, curveLinear, line } from \"d3-shape\";\nimport { scaleLinear } from \"d3-scale\";\nimport { extent, max } from \"d3-array\";\n\n\n/**\n * Sets up a canvas rescaled to device pixel ratio\n * From https://www.html5rocks.com/en/tutorials/canvas/hidpi/\n * @param {HTMLCanvasElement} canvas canvas element\n * @returns {CanvasRenderingContext2D} canvas rendering context\n */\nexport function setupCanvas(canvas) {\n    // Get the device pixel ratio, falling back to 1.\n    var dpr = window.devicePixelRatio || 1;\n    // Get the size of the canvas in CSS pixels.\n    var rect = canvas.getBoundingClientRect();\n    // Give the canvas pixel dimensions of their CSS\n    // Size times the device pixel ratio.\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    var ctx = canvas.getContext('2d');\n    // Scale all drawing operations by the dpr, so you\n    // don't have to worry about the difference.\n    ctx.scale(dpr, dpr);\n    return ctx;\n}\n\n\n/**\n * Draws horizontal bands with alternating color to better distinguish rows.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} rowHeight height of bnote boxes\n */\nexport function drawRowBands(ctx, margin, rows, rowHeight, width, fillStyle = 'rgba(128, 128, 128, 0.1)') {\n    const oldFill = ctx.fillStyle;\n    ctx.fillStyle = fillStyle;\n    const xPos = margin.left;\n    for (let i = 0; i < rows; i += 2) {\n        const yPos = margin.top + rowHeight * i;\n        ctx.fillRect(xPos, yPos, width, rowHeight);\n    }\n    ctx.fillStyle = oldFill;\n}\n\n/**\n * Draws a bar chart.\n * @param {CanvasRenderingContext2D} ctx canvas context\n * @param {number} x x position\n * @param {number} y y position\n * @param {number} width width\n * @param {number} height height\n * @param {number} maxVal maximum value towards the chart values are scaled\n * @param {number[]} values values to draw bars for\n * @param {string[]} colors color for each value entry\n */\nexport function drawBarChart(ctx, x, y, width, height, maxVal, values, colors) {\n    const w = width / values.length;\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        ctx.fillStyle = colors[i];\n        const h = (value / maxVal) * height;\n        const yPos = y + height - h;\n        ctx.fillRect(x + i * w, yPos, w - 2, h);\n    }\n}\n\n/**\n * Draws a stacked bar chart.\n * @param {CanvasRenderingContext2D} ctx canvas context\n * @param {number} x x position\n * @param {number} y y position\n * @param {number} width width\n * @param {number} height height\n * @param {number} maxVal maximum value towards the chart values are scaled\n * @param {number[]} values values to draw bars for\n * @param {string[]} colors color for each value entry\n */\nexport function drawStackedBarChart(ctx, x, y, width, height, maxVal, values, colors) {\n    let currentSum = 0;\n    // Stack values\n    for (let i = values.length - 1; i >= 0; i--) {\n        currentSum += values[i];\n        values[i] = currentSum;\n    }\n    for (let i = 0; i < values.length; i++) {\n        const val = values[i];\n        ctx.fillStyle = colors[i];\n        const h = (val / maxVal) * height;\n        const yPos = y + height - h;\n        ctx.fillRect(x, yPos, width, h);\n    }\n}\n\n/**\n * Draws a horizontal boxplot onto a canvas.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} drawOutliers if true, outliers will be drawn as dots\n * @param {string} fillBox color for the box\n * @param {string} fillWhisk color for the whiskers\n */\nexport function drawBoxplot(\n    ctx,\n    margin,\n    x,\n    yPos,\n    plotHeight,\n    data,\n    drawOutliers = false,\n    fillBox = 'rgba(70, 130, 180, 0.8)',\n    fillWhisk = 'steelblue'\n) {\n    const { q1, q2, q3, r0, r1 } = getBoxplotCharacteristics(data);\n    // Get positions\n    const q1Pos = margin.left + x(q1);\n    const q2Pos = margin.left + x(q2);\n    const q3Pos = margin.left + x(q3);\n    const r0Pos = margin.left + x(r0);\n    const r1Pos = margin.left + x(r1);\n    const yCenter = yPos + plotHeight / 2;\n    // Box (with a gap for the median)\n    ctx.fillStyle = fillBox;\n    ctx.fillRect(q1Pos, yPos, q2Pos - q1Pos - 1, plotHeight);\n    ctx.fillRect(q2Pos + 1, yPos, q3Pos - q2Pos - 1, plotHeight);\n    ctx.fillStyle = fillWhisk;\n    // Left whisker\n    ctx.fillRect(r0Pos, yPos, 1, plotHeight);\n    ctx.fillRect(r0Pos, yCenter, q1Pos - r0Pos, 1);\n    // Right whisker\n    ctx.fillRect(r1Pos, yPos, 1, plotHeight);\n    ctx.fillRect(q3Pos, yCenter, r1Pos - q3Pos, 1);\n    // Draw outliers\n    if (drawOutliers) {\n        const outliers = data.filter(d => d < r0 || d > r1);\n        for (let ol of outliers) {\n            ctx.fillRect(margin.left + x(ol), yCenter, 2, 2);\n        }\n    }\n}\n\n/**\n * Draws a kernel density estimation (KDE) area chart for each pitch.\n * TODO: draw mean and quartiles like in a box plot\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} smooth turn smoothing on and off\n * @param {string} fillStyle fill color\n * @param {number} bandwidth kernel bandwidth\n * @param {number} ticks number of ticks for which to compute a curve point\n */\nexport function drawKdeAreaChart(ctx, margin, x, yPos, plotHeight, data, smooth = true, fillStyle, bandwidth = 0.5, ticks = 100) {\n    const kde = kernelDensityEstimator(kernelEpanechnikov(bandwidth), x.ticks(ticks));\n    const estimate = kde(data);\n    // Force 0 for y value at start and end for correct drawing\n    estimate.unshift([estimate[0][0], 0]);\n    estimate.push([estimate[estimate.length - 1][0], 0]);\n    const y = scaleLinear()\n        .domain(extent(estimate, d => d[1]))\n        .range([yPos + plotHeight, yPos]);\n    // Smoothed or linearly interpolated area\n    const lineGenerator = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    ctx.beginPath();\n    lineGenerator(estimate);\n    ctx.closePath();\n    ctx.fillStyle = fillStyle;\n    ctx.fill();\n}\n\n/**\n * Draws a violinplot (a mirrored KDE area chart).\n * TODO: draw mean and quartiles like in a box plot\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin width {top, right, left, bottom}\n * @param {Function} x D3 linear scale\n * @param {number} yPos y position\n * @param {number} plotHeight height of the plot\n * @param {number[]} data array of numbers to draw the boxplot for\n * @param {boolean} smooth turn smoothing on and off\n * @param {string} fillStyle fill color\n * @param {number} bandwidth kernel bandwidth\n * @param {number} ticks number of ticks for which to compute a curve point\n */\nexport function drawViolinPlot(ctx, margin, x, yPos, plotHeight, data, smooth = true, fillStyle, bandwidth = 0.5, ticks = 100) {\n    const kde = kernelDensityEstimator(kernelEpanechnikov(bandwidth), x.ticks(ticks));\n    const estimate = kde(data);\n    // Force 0 for y value at start and end for correct drawing\n    estimate.unshift([estimate[0][0], 0]);\n    estimate.push([estimate[estimate.length - 1][0], 0]);\n    const maxEst = max(estimate, d => d[1]);\n    const y = scaleLinear()\n        .domain([-maxEst, maxEst])\n        .range([yPos + plotHeight, yPos]);\n    // Smoothed or linearly interpolated area\n    const lineGeneratorTop = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    const lineGeneratorBottom = line()\n        .x(d => margin.left + x(d[0]))\n        .y(d => y(-d[1]))\n        .curve(smooth ? curveMonotoneX : curveLinear)\n        .context(ctx);\n    ctx.fillStyle = fillStyle;\n    ctx.beginPath();\n    lineGeneratorTop(estimate);\n    ctx.closePath();\n    ctx.fill();\n    ctx.beginPath();\n    lineGeneratorBottom(estimate);\n    ctx.closePath();\n    ctx.fill();\n}\n\n\n/**\n  * Draws a drum note shape to the canvas.\n  * @param {CanvasRenderingContext2D} ctx canvas context\n  * @param {string} shape one of [triangle, <>, x, o, ostroke, xstroke]\n  * @param {number} x x position\n  * @param {number} y y position\n  * @param {number} size size (width and height of the symbols outer bounds)\n  */\nexport function drawDrumNoteShape(ctx, shape, x, y, size) {\n    const halfSize = size * 0.4;\n    switch (shape) {\n        case 'triangle':\n            drawTriangle(ctx, x, y, halfSize);\n            break;\n        case '<>':\n            drawDiamond(ctx, x, y, halfSize);\n            break;\n        case 'x':\n            drawX(ctx, x, y, halfSize);\n            break;\n        case 'o':\n            drawFilledCircle(ctx, x, y, halfSize);\n            break;\n        case 'ostroke':\n            drawFilledCircle(ctx, x, y, halfSize);\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(x - halfSize, y - halfSize);\n            ctx.lineTo(x + halfSize, y + halfSize);\n            ctx.stroke();\n            ctx.lineWidth = 1;\n            break;\n        case 'xstroke':\n            drawX(ctx, x, y, halfSize);\n            ctx.lineWidth = 3;\n            ctx.beginPath();\n            ctx.moveTo(x - halfSize, y);\n            ctx.lineTo(x + halfSize, y);\n            ctx.stroke();\n            ctx.lineWidth = 1;\n            break;\n        default:\n            console.warn(`Unsupported shape ${shape}`);\n    }\n}\n\n/**\n * Draws a stroked circle.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} radius radius\n */\nexport function drawCircle(ctx, x, y, radius) {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n}\n\n/**\n * Draws a filled circle.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} radius radius\n */\nexport function drawFilledCircle(ctx, x, y, radius) {\n    if (radius < 0) {\n        console.error(`Cannot draw circle with negative radius of ${radius}`);\n    }\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\n    ctx.fill();\n}\n\n/**\n * Draws a filled triangle like this: /\\\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawTriangle(ctx, x, y, halfSize) {\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y + halfSize);\n    ctx.lineTo(x + halfSize, y + halfSize);\n    ctx.lineTo(x, y - halfSize);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a diamond like this: <>\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawDiamond(ctx, x, y, halfSize) {\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y);\n    ctx.lineTo(x, y - halfSize);\n    ctx.lineTo(x + halfSize, y);\n    ctx.lineTo(x, y + halfSize);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws an X\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of center\n * @param {number} y y coordinate of center\n * @param {number} halfSize half of the size\n */\nexport function drawX(ctx, x, y, halfSize) {\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(x - halfSize, y - halfSize);\n    ctx.lineTo(x + halfSize, y + halfSize);\n    ctx.moveTo(x - halfSize, y + halfSize);\n    ctx.lineTo(x + halfSize, y - halfSize);\n    ctx.stroke();\n    ctx.lineWidth = 1;\n}\n\n/**\n * Draws a trapezoid that looks like a rectangle but gets narrower at the right\n * end, so better show where one ends and the next begins.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of top left\n * @param {number} y y coordinate of top left\n * @param {number} width width\n * @param {number} height height (of left side)\n * @param {number} height2 height (of right side)\n */\nexport function drawNoteTrapezoid(ctx, x, y, width, height, height2) {\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x, y + height);\n    ctx.lineTo(x + width, y + (height / 2 + height2 / 2));\n    ctx.lineTo(x + width, y + (height / 2 - height2 / 2));\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a trapezoid that looks like a rectangle but gets narrower at the top\n * end, so better show where one ends and the next begins.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} x x coordinate of bounding rect's top left\n * @param {number} y y coordinate of bounding rect's top left\n * @param {number} width width (of bounding rect / bottom side)\n * @param {number} height height\n * @param {number} width2 width (of top side)\n */\nexport function drawNoteTrapezoidUpwards(ctx, x, y, width, height, width2) {\n    ctx.beginPath();\n    ctx.lineTo(x, y + height);\n    ctx.lineTo(x + width, y + height);\n    ctx.lineTo(x + (width / 2 + width2 / 2), y);\n    ctx.lineTo(x + (width / 2 - width2 / 2), y);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws an arc that connects similar parts.\n * Both parts must have the same width in pixels.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} startX1 x coordinate of the start of the first part\n * @param {number} startX2 x coordinate of the start of the second part\n * @param {number} length length in pixels of the parts\n * @param {number} yBottom bottom baseline y coordinate\n */\nexport function drawArc(ctx, startX1, startX2, length, yBottom) {\n    // Get center and radius\n    const radius = (startX2 - startX1) / 2;\n    const cx = startX1 + radius + length / 2;\n    ctx.lineWidth = length;\n    ctx.beginPath();\n    ctx.arc(cx, yBottom, radius, Math.PI, 2 * Math.PI);\n    ctx.stroke();\n}\n\n/**\n * Draws a more complex path and fills it.\n * Two arcs: One from startX1 to endX2 on the top, one from endX1 to startX2\n * below it.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {number} startX1 x coordinate of the start of the first part\n * @param {number} endX1 x coordinate of the end of the first part\n * @param {number} startX2 x coordinate of the start of the second part\n * @param {number} endX2 x coordinate of the end of the second part\n * @param {number} endX2 x coordinate of the end of the second part\n * @param {number} yBottom bottom baseline y coordinate\n */\nexport function drawAssymetricArc(ctx, startX1, endX1, startX2, endX2, yBottom) {\n    // Get center and radius\n    const radiusTop = (endX2 - startX1) / 2;\n    if (radiusTop < 0) {\n        return;\n    }\n    let radiusBottom = (startX2 - endX1) / 2;\n    if (radiusBottom < 0) {\n        radiusBottom = 0;\n    }\n    const cxTop = startX1 + radiusTop;\n    const cxBottom = endX1 + radiusBottom;\n    ctx.beginPath();\n    ctx.moveTo(startX1, yBottom);\n    ctx.arc(cxTop, yBottom, radiusTop, Math.PI, 2 * Math.PI);\n    ctx.lineTo(startX2, yBottom);\n    ctx.arc(cxBottom, yBottom, radiusBottom, 2 * Math.PI, Math.PI, true);\n    ctx.closePath();\n    ctx.fill();\n}\n\n/**\n * Draws a line indicating the current player time\n * @param {number} currentPlayerTime current player time in seconds\n * @param {Function} x D3 scaleLinear for x axis\n */\nexport function drawCurrentTimeIndicator(ctx, currentPlayerTime, x, height, margin) {\n    if (currentPlayerTime === null) {\n        return;\n    }\n    const xPos = margin.left + x(currentPlayerTime) - 1;\n    ctx.fillRect(xPos, margin.top, 2, height);\n}\n\n/**\n * Clips left and right of a visualization by clearing parts of the canvas.\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} margin {top, right, bottom, left}\n * @param {number} width width of the area to clip around\n * @param {number} height height of the clipping area\n */\nexport function clipLeftRight(ctx, margin, width, height) {\n    ctx.clearRect(0, margin.top, margin.left, height);\n    ctx.clearRect(margin.left + width, margin.top, margin.right, height);\n}\n\n/**\n * Draws measure lines and tempo and beat type information\n * @param {CanvasRenderingContext2D} ctx canvas rendering context\n * @param {Object} parsedXml parsed MusicXML data\n * @param {Object} margin {top, right, bottom, left}\n * @param {number} width width\n * @param {number} height height\n * @param {Function} x D3 linear scale\n */\nexport function drawMusicXmlInformation(ctx, parsedXml, margin, width, height, x) {\n    // Draw measure lines\n    ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\n    for (let i = 0; i < parsedXml.measureLinePositions.length; i++) {\n        const line = parsedXml.measureLinePositions[i];\n        const xPos = x(line);\n        // Do not draw invisible lines\n        if (xPos < 0) { continue; }\n        if (xPos > width) { break; }\n        const pos = margin.left + xPos;\n        ctx.fillRect(pos, margin.top, 2, height);\n        // Draw measure number\n        if ((i + 2) % 4 === 0) {\n            ctx.fillStyle = '#888';\n            ctx.fillText(i + 2, pos + 10, margin.top);\n            ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\n        }\n    }\n    const xOffs = margin.left + 15;\n    ctx.fillStyle = '#888';\n    // Draw tempo changes\n    for (let t of parsedXml.tempoChanges) {\n        ctx.fillText(`${t.tempo} bpm`, xOffs + x(t.time), margin.top - 20);\n    }\n    // Draw beatType changes\n    for (let b of parsedXml.beatTypeChanges) {\n        ctx.fillText(`${b.beats} / ${b.beatType}`, xOffs + x(b.time), margin.top - 8);\n    }\n}\n","/**\r\n * Lookup for many MIDI specifications.\r\n * Information from: https://soundprogramming.net/file-formats/\r\n */\r\n\r\n\r\nconst MidiNoteByPitch = new Map();\r\nconst MidiNoteByLabel = new Map();\r\nconst MidiInstrumentByNumber = new Map();\r\nconst MidiInstrumentByNumberLev2 = new Map();\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified number.\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {Object} note info, e.g.\r\n *      { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440.000 }\r\n */\r\nexport function getMidiNoteByNr(nr) {\r\n    return MidiNoteByPitch.get(nr);\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified label.\r\n * @param {string} label note label, e.g. 'D#0'\r\n *      (upper-case and sharp notation necessary)\r\n * @returns {Object} note info, e.g.\r\n *      { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440.000 }\r\n */\r\nexport function getMidiNoteByLabel(label) {\r\n    return MidiNoteByLabel.get(label);\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified name and octave.\r\n * @param {string} name note name, e.g. 'D#'\r\n *      (upper-case and sharp notation necessary)\r\n * @param {number} octave octave in [-1, 9]\r\n * @returns {Object} note info, e.g.\r\n *      { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440.000 }\r\n */\r\nexport function getMidiNoteByNameAndOctave(name, octave) {\r\n    return MidiNoteByLabel.get(`${name}${octave}`);\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument with the specified number.\r\n * @param {number} nr MIDI instrument number in [0, 127]\r\n * @returns {Object} note info, e.g.\r\n *      { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' }\r\n */\r\nexport function getMidiInstrumentByNr(nr) {\r\n    return MidiInstrumentByNumber.get(nr);\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument (MIDI level 2) with the\r\n * specified number.\r\n * @param {number} nr MIDI instrument number in [0, 127]\r\n * @param {number} nr MIDI instrument number in [0, 127]\r\n * @returns {Object} note info, e.g.\r\n *      { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' }\r\n */\r\nexport function getMidiInstrumentByNrL2(nr, subNr) {\r\n    const key = `${nr}-${subNr}`;\r\n    return MidiInstrumentByNumberLev2.get(key);\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument with the specified number.\r\n * @param {number} nr MIDI drum note number in [27, 87]\r\n * @returns {string} note name, e.g. 'Bass Drum 1\r\n */\r\nexport function getMidiDrumNoteByNr(nr) {\r\n    return GENERAL_MIDI_DRUM_NOTE_NUMBERS.get(nr);\r\n}\r\n\r\n/**\r\n * Returns true if a given MIDI pitch refers to a sharp note.\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {boolean} true if sharp, false otherwise\r\n */\r\nexport function isSharp(nr) {\r\n    return SHARPS.has(nr);\r\n}\r\n\r\n/**\r\n * Returns a note name such as 'C#' (without octave) for a given MIDI\r\n * note number.\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {string} note name such as 'C#'\r\n */\r\nexport function getNoteNameFromNoteNr(nr) {\r\n    return NOTE_NAMES[nr % 12];\r\n}\r\n\r\n\r\n\r\n/**\r\n * Below here are only arrays with information and lookup-map-building code\r\n */\r\n\r\nexport const NOTE_NAMES = [\r\n    'C',\r\n    'C#',\r\n    'D',\r\n    'D#',\r\n    'E',\r\n    'F',\r\n    'F#',\r\n    'G',\r\n    'G#',\r\n    'A',\r\n    'A#',\r\n    'B',\r\n];\r\n\r\nconst MIDI_NOTES = [\r\n    { pitch: 0, name: 'C', octave: -1, label: 'C-1', frequency: 8.176 },\r\n    { pitch: 1, name: 'C#', octave: -1, label: 'C#-1', frequency: 8.662 },\r\n    { pitch: 2, name: 'D', octave: -1, label: 'D-1', frequency: 9.177 },\r\n    { pitch: 3, name: 'D#', octave: -1, label: 'D#-1', frequency: 9.723 },\r\n    { pitch: 4, name: 'E', octave: -1, label: 'E-1', frequency: 10.301 },\r\n    { pitch: 5, name: 'F', octave: -1, label: 'F-1', frequency: 10.913 },\r\n    { pitch: 6, name: 'F#', octave: -1, label: 'F#-1', frequency: 11.562 },\r\n    { pitch: 7, name: 'G', octave: -1, label: 'G-1', frequency: 12.250 },\r\n    { pitch: 8, name: 'G#', octave: -1, label: 'G#-1', frequency: 12.978 },\r\n    { pitch: 9, name: 'A', octave: -1, label: 'A-1', frequency: 13.750 },\r\n    { pitch: 10, name: 'A#', octave: -1, label: 'A#-1', frequency: 14.568 },\r\n    { pitch: 11, name: 'B', octave: -1, label: 'B-1', frequency: 15.434 },\r\n    { pitch: 12, name: 'C', octave: 0, label: 'C0', frequency: 16.352 },\r\n    { pitch: 13, name: 'C#', octave: 0, label: 'C#0', frequency: 17.324 },\r\n    { pitch: 14, name: 'D', octave: 0, label: 'D0', frequency: 18.354 },\r\n    { pitch: 15, name: 'D#', octave: 0, label: 'D#0', frequency: 19.445 },\r\n    { pitch: 16, name: 'E', octave: 0, label: 'E0', frequency: 20.602 },\r\n    { pitch: 17, name: 'F', octave: 0, label: 'F0', frequency: 21.827 },\r\n    { pitch: 18, name: 'F#', octave: 0, label: 'F#0', frequency: 23.125 },\r\n    { pitch: 19, name: 'G', octave: 0, label: 'G0', frequency: 24.500 },\r\n    { pitch: 20, name: 'G#', octave: 0, label: 'G#0', frequency: 25.957 },\r\n    { pitch: 21, name: 'A', octave: 0, label: 'A0', frequency: 27.500 },\r\n    { pitch: 22, name: 'A#', octave: 0, label: 'A#0', frequency: 29.135 },\r\n    { pitch: 23, name: 'B', octave: 0, label: 'B0', frequency: 30.868 },\r\n    { pitch: 24, name: 'C', octave: 1, label: 'C1', frequency: 32.703 },\r\n    { pitch: 25, name: 'C#', octave: 1, label: 'C#1', frequency: 34.648 },\r\n    { pitch: 26, name: 'D', octave: 1, label: 'D1', frequency: 36.708 },\r\n    { pitch: 27, name: 'D#', octave: 1, label: 'D#1', frequency: 38.891 },\r\n    { pitch: 28, name: 'E', octave: 1, label: 'E1', frequency: 41.203 },\r\n    { pitch: 29, name: 'F', octave: 1, label: 'F1', frequency: 43.654 },\r\n    { pitch: 30, name: 'F#', octave: 1, label: 'F#1', frequency: 46.249 },\r\n    { pitch: 31, name: 'G', octave: 1, label: 'G1', frequency: 48.999 },\r\n    { pitch: 32, name: 'G#', octave: 1, label: 'G#1', frequency: 51.913 },\r\n    { pitch: 33, name: 'A', octave: 1, label: 'A1', frequency: 55.000 },\r\n    { pitch: 34, name: 'A#', octave: 1, label: 'A#1', frequency: 58.270 },\r\n    { pitch: 35, name: 'B', octave: 1, label: 'B1', frequency: 61.735 },\r\n    { pitch: 36, name: 'C', octave: 2, label: 'C2', frequency: 65.406 },\r\n    { pitch: 37, name: 'C#', octave: 2, label: 'C#2', frequency: 69.296 },\r\n    { pitch: 38, name: 'D', octave: 2, label: 'D2', frequency: 73.416 },\r\n    { pitch: 39, name: 'D#', octave: 2, label: 'D#2', frequency: 77.782 },\r\n    { pitch: 40, name: 'E', octave: 2, label: 'E2', frequency: 82.407 },\r\n    { pitch: 41, name: 'F', octave: 2, label: 'F2', frequency: 87.307 },\r\n    { pitch: 42, name: 'F#', octave: 2, label: 'F#2', frequency: 92.499 },\r\n    { pitch: 43, name: 'G', octave: 2, label: 'G2', frequency: 97.999 },\r\n    { pitch: 44, name: 'G#', octave: 2, label: 'G#2', frequency: 103.826 },\r\n    { pitch: 45, name: 'A', octave: 2, label: 'A2', frequency: 110.000 },\r\n    { pitch: 46, name: 'A#', octave: 2, label: 'A#2', frequency: 116.541 },\r\n    { pitch: 47, name: 'B', octave: 2, label: 'B2', frequency: 123.471 },\r\n    { pitch: 48, name: 'C', octave: 3, label: 'C3', frequency: 130.813 },\r\n    { pitch: 49, name: 'C#', octave: 3, label: 'C#3', frequency: 138.591 },\r\n    { pitch: 50, name: 'D', octave: 3, label: 'D3', frequency: 146.832 },\r\n    { pitch: 51, name: 'D#', octave: 3, label: 'D#3', frequency: 155.563 },\r\n    { pitch: 52, name: 'E', octave: 3, label: 'E3', frequency: 164.814 },\r\n    { pitch: 53, name: 'F', octave: 3, label: 'F3', frequency: 174.614 },\r\n    { pitch: 54, name: 'F#', octave: 3, label: 'F#3', frequency: 184.997 },\r\n    { pitch: 55, name: 'G', octave: 3, label: 'G3', frequency: 195.998 },\r\n    { pitch: 56, name: 'G#', octave: 3, label: 'G#3', frequency: 207.652 },\r\n    { pitch: 57, name: 'A', octave: 3, label: 'A3', frequency: 220.000 },\r\n    { pitch: 58, name: 'A#', octave: 3, label: 'A#3', frequency: 233.082 },\r\n    { pitch: 59, name: 'B', octave: 3, label: 'B3', frequency: 246.942 },\r\n    { pitch: 60, name: 'C', octave: 4, label: 'C4', frequency: 261.626 },\r\n    { pitch: 61, name: 'C#', octave: 4, label: 'C#4', frequency: 277.183 },\r\n    { pitch: 62, name: 'D', octave: 4, label: 'D4', frequency: 293.665 },\r\n    { pitch: 63, name: 'D#', octave: 4, label: 'D#4', frequency: 311.127 },\r\n    { pitch: 64, name: 'E', octave: 4, label: 'E4', frequency: 329.628 },\r\n    { pitch: 65, name: 'F', octave: 4, label: 'F4', frequency: 349.228 },\r\n    { pitch: 66, name: 'F#', octave: 4, label: 'F#4', frequency: 369.994 },\r\n    { pitch: 67, name: 'G', octave: 4, label: 'G4', frequency: 391.995 },\r\n    { pitch: 68, name: 'G#', octave: 4, label: 'G#4', frequency: 415.305 },\r\n    { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440.000 },\r\n    { pitch: 70, name: 'A#', octave: 4, label: 'A#4', frequency: 466.164 },\r\n    { pitch: 71, name: 'B', octave: 4, label: 'B4', frequency: 493.883 },\r\n    { pitch: 72, name: 'C', octave: 5, label: 'C5', frequency: 523.251 },\r\n    { pitch: 73, name: 'C#', octave: 5, label: 'C#5', frequency: 554.365 },\r\n    { pitch: 74, name: 'D', octave: 5, label: 'D5', frequency: 587.330 },\r\n    { pitch: 75, name: 'D#', octave: 5, label: 'D#5', frequency: 622.254 },\r\n    { pitch: 76, name: 'E', octave: 5, label: 'E5', frequency: 659.255 },\r\n    { pitch: 77, name: 'F', octave: 5, label: 'F5', frequency: 698.456 },\r\n    { pitch: 78, name: 'F#', octave: 5, label: 'F#5', frequency: 739.989 },\r\n    { pitch: 79, name: 'G', octave: 5, label: 'G5', frequency: 783.991 },\r\n    { pitch: 80, name: 'G#', octave: 5, label: 'G#5', frequency: 830.609 },\r\n    { pitch: 81, name: 'A', octave: 5, label: 'A5', frequency: 880.000 },\r\n    { pitch: 82, name: 'A#', octave: 5, label: 'A#5', frequency: 932.328 },\r\n    { pitch: 83, name: 'B', octave: 5, label: 'B5', frequency: 987.767 },\r\n    { pitch: 84, name: 'C', octave: 6, label: 'C6', frequency: 1046.502 },\r\n    { pitch: 85, name: 'C#', octave: 6, label: 'C#6', frequency: 1108.731 },\r\n    { pitch: 86, name: 'D', octave: 6, label: 'D6', frequency: 1174.659 },\r\n    { pitch: 87, name: 'D#', octave: 6, label: 'D#6', frequency: 1244.508 },\r\n    { pitch: 88, name: 'E', octave: 6, label: 'E6', frequency: 1318.510 },\r\n    { pitch: 89, name: 'F', octave: 6, label: 'F6', frequency: 1396.913 },\r\n    { pitch: 90, name: 'F#', octave: 6, label: 'F#6', frequency: 1479.978 },\r\n    { pitch: 91, name: 'G', octave: 6, label: 'G6', frequency: 1567.982 },\r\n    { pitch: 92, name: 'G#', octave: 6, label: 'G#6', frequency: 1661.219 },\r\n    { pitch: 93, name: 'A', octave: 6, label: 'A6', frequency: 1760.000 },\r\n    { pitch: 94, name: 'A#', octave: 6, label: 'A#6', frequency: 1864.655 },\r\n    { pitch: 95, name: 'B', octave: 6, label: 'B6', frequency: 1975.533 },\r\n    { pitch: 96, name: 'C', octave: 7, label: 'C7', frequency: 2093.005 },\r\n    { pitch: 97, name: 'C#', octave: 7, label: 'C#7', frequency: 2217.461 },\r\n    { pitch: 98, name: 'D', octave: 7, label: 'D7', frequency: 2349.318 },\r\n    { pitch: 99, name: 'D#', octave: 7, label: 'D#7', frequency: 2489.016 },\r\n    { pitch: 100, name: 'E', octave: 7, label: 'E7', frequency: 2637.020 },\r\n    { pitch: 101, name: 'F', octave: 7, label: 'F7', frequency: 2793.826 },\r\n    { pitch: 102, name: 'F#', octave: 7, label: 'F#7', frequency: 2959.955 },\r\n    { pitch: 103, name: 'G', octave: 7, label: 'G7', frequency: 3135.963 },\r\n    { pitch: 104, name: 'G#', octave: 7, label: 'G#7', frequency: 3322.438 },\r\n    { pitch: 105, name: 'A', octave: 7, label: 'A7', frequency: 3520.000 },\r\n    { pitch: 106, name: 'A#', octave: 7, label: 'A#7', frequency: 3729.310 },\r\n    { pitch: 107, name: 'B', octave: 7, label: 'B7', frequency: 3951.066 },\r\n    { pitch: 108, name: 'C', octave: 8, label: 'C8', frequency: 4186.009 },\r\n    { pitch: 109, name: 'C#', octave: 8, label: 'C#8', frequency: 4434.922 },\r\n    { pitch: 110, name: 'D', octave: 8, label: 'D8', frequency: 4698.636 },\r\n    { pitch: 111, name: 'D#', octave: 8, label: 'D#8', frequency: 4978.032 },\r\n    { pitch: 112, name: 'E', octave: 8, label: 'E8', frequency: 5274.041 },\r\n    { pitch: 113, name: 'F', octave: 8, label: 'F8', frequency: 5587.652 },\r\n    { pitch: 114, name: 'F#', octave: 8, label: 'F#8', frequency: 5919.911 },\r\n    { pitch: 115, name: 'G', octave: 8, label: 'G8', frequency: 6271.927 },\r\n    { pitch: 116, name: 'G#', octave: 8, label: 'G#8', frequency: 6644.875 },\r\n    { pitch: 117, name: 'A', octave: 8, label: 'A8', frequency: 7040.000 },\r\n    { pitch: 118, name: 'A#', octave: 8, label: 'A#8', frequency: 7458.620 },\r\n    { pitch: 119, name: 'B', octave: 8, label: 'B8', frequency: 7902.133 },\r\n    { pitch: 120, name: 'C', octave: 9, label: 'C9', frequency: 8372.018 },\r\n    { pitch: 121, name: 'C#', octave: 9, label: 'C#9', frequency: 8869.844 },\r\n    { pitch: 122, name: 'D', octave: 9, label: 'D9', frequency: 9397.273 },\r\n    { pitch: 123, name: 'D#', octave: 9, label: 'D#9', frequency: 9956.063 },\r\n    { pitch: 124, name: 'E', octave: 9, label: 'E9', frequency: 10548.080 },\r\n    { pitch: 125, name: 'F', octave: 9, label: 'F9', frequency: 11175.300 },\r\n    { pitch: 126, name: 'F#', octave: 9, label: 'F#9', frequency: 11839.820 },\r\n    { pitch: 127, name: 'G', octave: 9, label: 'G9', frequency: 12543.850 },\r\n];\r\n\r\nexport const SHARPS = new Map([\r\n    [1, null],\r\n    [3, null],\r\n    [6, null],\r\n    [8, null],\r\n    [10, null],\r\n    [13, null],\r\n    [15, null],\r\n    [18, null],\r\n    [20, null],\r\n    [22, null],\r\n    [25, null],\r\n    [27, null],\r\n    [30, null],\r\n    [32, null],\r\n    [34, null],\r\n    [37, null],\r\n    [39, null],\r\n    [42, null],\r\n    [44, null],\r\n    [46, null],\r\n    [49, null],\r\n    [51, null],\r\n    [54, null],\r\n    [56, null],\r\n    [58, null],\r\n    [61, null],\r\n    [63, null],\r\n    [66, null],\r\n    [68, null],\r\n    [70, null],\r\n    [73, null],\r\n    [75, null],\r\n    [78, null],\r\n    [80, null],\r\n    [82, null],\r\n    [85, null],\r\n    [87, null],\r\n    [90, null],\r\n    [92, null],\r\n    [94, null],\r\n    [97, null],\r\n    [99, null],\r\n    [102, null],\r\n    [104, null],\r\n    [106, null],\r\n    [109, null],\r\n    [111, null],\r\n    [114, null],\r\n    [116, null],\r\n    [118, null],\r\n    [121, null],\r\n    [123, null],\r\n    [126, null]\r\n]);\r\n\r\nconst MIDI_INSTRUMENTS = [\r\n    { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' },\r\n    { number: 1, group: 'Piano', label: 'Bright Acoustic Piano' },\r\n    { number: 2, group: 'Piano', label: 'Electric Grand Piano' },\r\n    { number: 3, group: 'Piano', label: 'Honky-tonk Piano' },\r\n    { number: 4, group: 'Piano', label: 'Electric Piano 1' },\r\n    { number: 5, group: 'Piano', label: 'Electric Piano 2' },\r\n    { number: 6, group: 'Piano', label: 'Harpsichord' },\r\n    { number: 7, group: 'Piano', label: 'Clavinet' },\r\n    { number: 8, group: 'Chromatic Percussion', label: 'Celesta' },\r\n    { number: 9, group: 'Chromatic Percussion', label: 'Glockenspiel' },\r\n    { number: 10, group: 'Chromatic Percussion', label: 'Music Box' },\r\n    { number: 11, group: 'Chromatic Percussion', label: 'Vibraphone' },\r\n    { number: 12, group: 'Chromatic Percussion', label: 'Marimba' },\r\n    { number: 13, group: 'Chromatic Percussion', label: 'Xylophone' },\r\n    { number: 14, group: 'Chromatic Percussion', label: 'Tubular Bells' },\r\n    { number: 15, group: 'Chromatic Percussion', label: 'Dulcimer' },\r\n    { number: 16, group: 'Organ', label: 'Drawbar Organ' },\r\n    { number: 17, group: 'Organ', label: 'Percussive Organ' },\r\n    { number: 18, group: 'Organ', label: 'Rock Organ' },\r\n    { number: 19, group: 'Organ', label: 'Church Organ' },\r\n    { number: 20, group: 'Organ', label: 'Reed Organ' },\r\n    { number: 21, group: 'Organ', label: 'Accordion' },\r\n    { number: 22, group: 'Organ', label: 'Harmonica' },\r\n    { number: 23, group: 'Organ', label: 'Tango Accordion' },\r\n    { number: 24, group: 'Guitar', label: 'Acoustic Guitar(nylon)' },\r\n    { number: 25, group: 'Guitar', label: 'Acoustic Guitar(steel)' },\r\n    { number: 26, group: 'Guitar', label: 'Electric Guitar(jazz)' },\r\n    { number: 27, group: 'Guitar', label: 'Electric Guitar(clean)' },\r\n    { number: 28, group: 'Guitar', label: 'Electric Guitar(muted)' },\r\n    { number: 29, group: 'Guitar', label: 'Overdriven Guitar' },\r\n    { number: 30, group: 'Guitar', label: 'Distortion Guitar' },\r\n    { number: 31, group: 'Guitar', label: 'Guitar harmonics' },\r\n    { number: 32, group: 'Bass', label: 'Acoustic Bass' },\r\n    { number: 33, group: 'Bass', label: 'Electric Bass(finger)' },\r\n    { number: 34, group: 'Bass', label: 'Electric Bass(pick)' },\r\n    { number: 35, group: 'Bass', label: 'Fretless Bass' },\r\n    { number: 36, group: 'Bass', label: 'Slap Bass 1' },\r\n    { number: 37, group: 'Bass', label: 'Slap Bass 2' },\r\n    { number: 38, group: 'Bass', label: 'Synth Bass 1' },\r\n    { number: 39, group: 'Bass', label: 'Synth Bass 2' },\r\n    { number: 40, group: 'Strings', label: 'Violin' },\r\n    { number: 41, group: 'Strings', label: 'Viola' },\r\n    { number: 42, group: 'Strings', label: 'Cello' },\r\n    { number: 43, group: 'Strings', label: 'Contrabass' },\r\n    { number: 44, group: 'Strings', label: 'Tremolo Strings' },\r\n    { number: 45, group: 'Strings', label: 'Pizzicato Strings' },\r\n    { number: 46, group: 'Strings', label: 'Orchestral Harp' },\r\n    { number: 47, group: 'Strings', label: 'Timpani' },\r\n    { number: 48, group: 'Strings (continued)', label: 'String Ensemble 1' },\r\n    { number: 49, group: 'Strings (continued)', label: 'String Ensemble 2' },\r\n    { number: 50, group: 'Strings (continued)', label: 'Synth Strings 1' },\r\n    { number: 51, group: 'Strings (continued)', label: 'Synth Strings 2' },\r\n    { number: 52, group: 'Strings (continued)', label: 'Choir Aahs' },\r\n    { number: 53, group: 'Strings (continued)', label: 'Voice Oohs' },\r\n    { number: 54, group: 'Strings (continued)', label: 'Synth Voice' },\r\n    { number: 55, group: 'Strings (continued)', label: 'Orchestra Hit' },\r\n    { number: 56, group: 'Brass', label: 'Trumpet' },\r\n    { number: 57, group: 'Brass', label: 'Trombone' },\r\n    { number: 58, group: 'Brass', label: 'Tuba' },\r\n    { number: 59, group: 'Brass', label: 'Muted Trumpet' },\r\n    { number: 60, group: 'Brass', label: 'French Horn' },\r\n    { number: 61, group: 'Brass', label: 'Brass Section' },\r\n    { number: 62, group: 'Brass', label: 'Synth Brass 1' },\r\n    { number: 63, group: 'Brass', label: 'Synth Brass 2' },\r\n    { number: 64, group: 'Reed', label: 'Soprano Sax' },\r\n    { number: 65, group: 'Reed', label: 'Alto Sax' },\r\n    { number: 66, group: 'Reed', label: 'Tenor Sax' },\r\n    { number: 67, group: 'Reed', label: 'Baritone Sax' },\r\n    { number: 68, group: 'Reed', label: 'Oboe' },\r\n    { number: 69, group: 'Reed', label: 'English Horn' },\r\n    { number: 70, group: 'Reed', label: 'Bassoon' },\r\n    { number: 71, group: 'Reed', label: 'Clarinet' },\r\n    { number: 72, group: 'Pipe', label: 'Piccolo' },\r\n    { number: 73, group: 'Pipe', label: 'Flute' },\r\n    { number: 74, group: 'Pipe', label: 'Recorder' },\r\n    { number: 75, group: 'Pipe', label: 'Pan Flute' },\r\n    { number: 76, group: 'Pipe', label: 'Blown Bottle' },\r\n    { number: 77, group: 'Pipe', label: 'Shakuhachi' },\r\n    { number: 78, group: 'Pipe', label: 'Whistle' },\r\n    { number: 79, group: 'Pipe', label: 'Ocarina' },\r\n    { number: 80, group: 'Synth Lead', label: 'Lead 1(square)' },\r\n    { number: 81, group: 'Synth Lead', label: 'Lead 2(sawtooth)' },\r\n    { number: 82, group: 'Synth Lead', label: 'Lead 3(calliope)' },\r\n    { number: 83, group: 'Synth Lead', label: 'Lead 4(chiff)' },\r\n    { number: 84, group: 'Synth Lead', label: 'Lead 5(charang)' },\r\n    { number: 85, group: 'Synth Lead', label: 'Lead 6(voice)' },\r\n    { number: 86, group: 'Synth Lead', label: 'Lead 7(fifths)' },\r\n    { number: 87, group: 'Synth Lead', label: 'Lead 8(bass + lead)' },\r\n    { number: 88, group: 'Synth Pad', label: 'Pad 1(new age)' },\r\n    { number: 89, group: 'Synth Pad', label: 'Pad 2(warm)' },\r\n    { number: 90, group: 'Synth Pad', label: 'Pad 3(polysynth)' },\r\n    { number: 91, group: 'Synth Pad', label: 'Pad 4(choir)' },\r\n    { number: 92, group: 'Synth Pad', label: 'Pad 5(bowed)' },\r\n    { number: 93, group: 'Synth Pad', label: 'Pad 6(metallic)' },\r\n    { number: 94, group: 'Synth Pad', label: 'Pad 7(halo)' },\r\n    { number: 95, group: 'Synth Pad', label: 'Pad 8(sweep)' },\r\n    { number: 96, group: 'Synth Effects', label: 'FX 1(rain)' },\r\n    { number: 97, group: 'Synth Effects', label: 'FX 2(soundtrack)' },\r\n    { number: 98, group: 'Synth Effects', label: 'FX 3(crystal)' },\r\n    { number: 99, group: 'Synth Effects', label: 'FX 4(atmosphere)' },\r\n    { number: 100, group: 'Synth Effects', label: 'FX 5(brightness)' },\r\n    { number: 101, group: 'Synth Effects', label: 'FX 6(goblins)' },\r\n    { number: 102, group: 'Synth Effects', label: 'FX 7(echoes)' },\r\n    { number: 103, group: 'Synth Effects', label: 'FX 8(sci-fi)' },\r\n    { number: 104, group: 'Ethnic', label: 'Sitar' },\r\n    { number: 105, group: 'Ethnic', label: 'Banjo' },\r\n    { number: 106, group: 'Ethnic', label: 'Shamisen' },\r\n    { number: 107, group: 'Ethnic', label: 'Koto' },\r\n    { number: 108, group: 'Ethnic', label: 'Kalimba' },\r\n    { number: 109, group: 'Ethnic', label: 'Bag pipe' },\r\n    { number: 110, group: 'Ethnic', label: 'Fiddle' },\r\n    { number: 111, group: 'Ethnic', label: 'Shanai' },\r\n    { number: 112, group: 'Percussive', label: 'Tinkle Bell' },\r\n    { number: 113, group: 'Percussive', label: 'Agogo' },\r\n    { number: 114, group: 'Percussive', label: 'Steel Drums' },\r\n    { number: 115, group: 'Percussive', label: 'Woodblock' },\r\n    { number: 116, group: 'Percussive', label: 'Taiko Drum' },\r\n    { number: 117, group: 'Percussive', label: 'Melodic Tom' },\r\n    { number: 118, group: 'Percussive', label: 'Synth Drum' },\r\n    { number: 119, group: 'Sound Effects', label: 'Reverse Cymbal' },\r\n    { number: 120, group: 'Sound Effects', label: 'Guitar Fret Noise' },\r\n    { number: 121, group: 'Sound Effects', label: 'Breath Noise' },\r\n    { number: 122, group: 'Sound Effects', label: 'Seashore' },\r\n    { number: 123, group: 'Sound Effects', label: 'Bird Tweet' },\r\n    { number: 124, group: 'Sound Effects', label: 'Telephone Ring' },\r\n    { number: 125, group: 'Sound Effects', label: 'Helicopter' },\r\n    { number: 126, group: 'Sound Effects', label: 'Applause' },\r\n    { number: 127, group: 'Sound Effects', label: 'Gunshot' },\r\n];\r\n\r\nconst MIDI_INSTRUMENTS_Lev2 = [\r\n    { number: 1, subnumber: 0, group: 'Piano', label: 'Acoustic Grand Piano' },\r\n    { number: 1, subnumber: 1, group: 'Piano', label: 'Wide Acoustic Grand' },\r\n    { number: 1, subnumber: 2, group: 'Piano', label: 'Dark Acoustic Grand' },\r\n    { number: 2, subnumber: 0, group: 'Piano', label: 'Bright Acoustic Piano' },\r\n    { number: 2, subnumber: 1, group: 'Piano', label: 'Wide Bright Acoustic' },\r\n    { number: 3, subnumber: 0, group: 'Piano', label: 'Electric Grand Piano' },\r\n    { number: 3, subnumber: 1, group: 'Piano', label: 'Wide Electric Grand' },\r\n    { number: 4, subnumber: 0, group: 'Piano', label: 'Honky-tonk Piano' },\r\n    { number: 4, subnumber: 1, group: 'Piano', label: 'Wide Honky-tonk' },\r\n    { number: 5, subnumber: 0, group: 'Piano', label: 'Rhodes Piano' },\r\n    { number: 5, subnumber: 1, group: 'Piano', label: 'Detuned Electric Piano 1' },\r\n    { number: 5, subnumber: 2, group: 'Piano', label: 'Electric Piano 1 Variation' },\r\n    { number: 5, subnumber: 3, group: 'Piano', label: '60\\'s Electric Piano' },\r\n    { number: 6, subnumber: 0, group: 'Piano', label: 'Chorused Electric Piano' },\r\n    { number: 6, subnumber: 1, group: 'Piano', label: 'Detuned Electric Piano 2' },\r\n    { number: 6, subnumber: 2, group: 'Piano', label: 'Electric Piano 2 Variation' },\r\n    { number: 6, subnumber: 3, group: 'Piano', label: 'Electric Piano Legend' },\r\n    { number: 6, subnumber: 4, group: 'Piano', label: 'Electric Piano Phase' },\r\n    { number: 7, subnumber: 0, group: 'Piano', label: 'Harpsichord' },\r\n    { number: 7, subnumber: 1, group: 'Piano', label: 'Coupled Harpsichord' },\r\n    { number: 7, subnumber: 2, group: 'Piano', label: 'Wide Harpsichord' },\r\n    { number: 7, subnumber: 3, group: 'Piano', label: 'Open Harpsichord' },\r\n    { number: 8, subnumber: 0, group: 'Piano', label: 'Clavinet' },\r\n    { number: 8, subnumber: 1, group: 'Piano', label: 'Pulse Clavinet' },\r\n    { number: 9, subnumber: 0, group: 'Chromatic Percussion', label: 'Celesta' },\r\n    { number: 10, subnumber: 0, group: 'Chromatic Percussion', label: 'Glockenspiel' },\r\n    { number: 11, subnumber: 0, group: 'Chromatic Percussion', label: 'Music Box' },\r\n    { number: 12, subnumber: 0, group: 'Chromatic Percussion', label: 'Vibraphone' },\r\n    { number: 12, subnumber: 1, group: 'Chromatic Percussion', label: 'Wet Vibraphone' },\r\n    { number: 13, subnumber: 0, group: 'Chromatic Percussion', label: 'Marimba' },\r\n    { number: 13, subnumber: 1, group: 'Chromatic Percussion', label: 'Wide Marimba' },\r\n    { number: 14, subnumber: 0, group: 'Chromatic Percussion', label: 'Xylophone' },\r\n    { number: 15, subnumber: 0, group: 'Chromatic Percussion', label: 'Tubular Bells' },\r\n    { number: 15, subnumber: 1, group: 'Chromatic Percussion', label: 'Church Bells' },\r\n    { number: 15, subnumber: 2, group: 'Chromatic Percussion', label: 'Carillon' },\r\n    { number: 16, subnumber: 0, group: 'Chromatic Percussion', label: 'Dulcimer / Santur' },\r\n    { number: 17, subnumber: 0, group: 'Organ', label: 'Hammond Organ' },\r\n    { number: 17, subnumber: 1, group: 'Organ', label: 'Detuned Organ 1' },\r\n    { number: 17, subnumber: 2, group: 'Organ', label: '60\\'s Organ 1' },\r\n    { number: 17, subnumber: 3, group: 'Organ', label: 'Organ 4' },\r\n    { number: 18, subnumber: 0, group: 'Organ', label: 'Percussive Organ' },\r\n    { number: 18, subnumber: 1, group: 'Organ', label: 'Detuned Organ 2' },\r\n    { number: 18, subnumber: 2, group: 'Organ', label: 'Organ 5' },\r\n    { number: 19, subnumber: 0, group: 'Organ', label: 'Rock Organ' },\r\n    { number: 20, subnumber: 0, group: 'Organ', label: 'Church Organ 1' },\r\n    { number: 20, subnumber: 1, group: 'Organ', label: 'Church Organ 2' },\r\n    { number: 20, subnumber: 2, group: 'Organ', label: 'Church Organ 3' },\r\n    { number: 21, subnumber: 0, group: 'Organ', label: 'Reed Organ' },\r\n    { number: 21, subnumber: 1, group: 'Organ', label: 'Puff Organ' },\r\n    { number: 22, subnumber: 0, group: 'Organ', label: 'French Accordion' },\r\n    { number: 22, subnumber: 1, group: 'Organ', label: 'Italian Accordion' },\r\n    { number: 23, subnumber: 0, group: 'Organ', label: 'Harmonica' },\r\n    { number: 24, subnumber: 0, group: 'Organ', label: 'Bandoneon' },\r\n    { number: 25, subnumber: 0, group: 'Guitar', label: 'Nylon-String Guitar' },\r\n    { number: 25, subnumber: 1, group: 'Guitar', label: 'Ukelele' },\r\n    { number: 25, subnumber: 2, group: 'Guitar', label: 'Open Nylon Guitar' },\r\n    { number: 25, subnumber: 3, group: 'Guitar', label: 'Nylon Guitar 2' },\r\n    { number: 26, subnumber: 0, group: 'Guitar', label: 'Steel-String Guitar' },\r\n    { number: 26, subnumber: 1, group: 'Guitar', label: '12-String Guitar' },\r\n    { number: 26, subnumber: 2, group: 'Guitar', label: 'Mandolin' },\r\n    { number: 26, subnumber: 3, group: 'Guitar', label: 'Steel + Body' },\r\n    { number: 27, subnumber: 0, group: 'Guitar', label: 'Jazz Guitar' },\r\n    { number: 27, subnumber: 1, group: 'Guitar', label: 'Hawaiian Guitar' },\r\n    { number: 28, subnumber: 0, group: 'Guitar', label: 'Clean Electric Guitar' },\r\n    { number: 28, subnumber: 1, group: 'Guitar', label: 'Chorus Guitar' },\r\n    { number: 28, subnumber: 2, group: 'Guitar', label: 'Mid Tone Guitar' },\r\n    { number: 29, subnumber: 0, group: 'Guitar', label: 'Muted Electric Guitar' },\r\n    { number: 29, subnumber: 1, group: 'Guitar', label: 'Funk Guitar' },\r\n    { number: 29, subnumber: 2, group: 'Guitar', label: 'Funk Guitar 2' },\r\n    { number: 29, subnumber: 3, group: 'Guitar', label: 'Jazz Man' },\r\n    { number: 30, subnumber: 0, group: 'Guitar', label: 'Overdriven Guitar' },\r\n    { number: 30, subnumber: 1, group: 'Guitar', label: 'Guitar Pinch' },\r\n    { number: 31, subnumber: 0, group: 'Guitar', label: 'Distortion Guitar' },\r\n    { number: 31, subnumber: 1, group: 'Guitar', label: 'Feedback Guitar' },\r\n    { number: 31, subnumber: 2, group: 'Guitar', label: 'Distortion Rtm Guitar' },\r\n    { number: 32, subnumber: 0, group: 'Guitar', label: 'Guitar Harmonics' },\r\n    { number: 32, subnumber: 1, group: 'Guitar', label: 'Guitar Feedback' },\r\n    { number: 33, subnumber: 0, group: 'Bass', label: 'Acoustic Bass' },\r\n    { number: 34, subnumber: 0, group: 'Bass', label: 'Fingered Bass' },\r\n    { number: 34, subnumber: 1, group: 'Bass', label: 'Finger Slap' },\r\n    { number: 35, subnumber: 0, group: 'Bass', label: 'Picked Bass' },\r\n    { number: 36, subnumber: 0, group: 'Bass', label: 'Fretless Bass' },\r\n    { number: 37, subnumber: 0, group: 'Bass', label: 'Slap Bass 1' },\r\n    { number: 38, subnumber: 0, group: 'Bass', label: 'Slap Bass 2' },\r\n    { number: 39, subnumber: 0, group: 'Bass', label: 'Synth Bass 1' },\r\n    { number: 39, subnumber: 1, group: 'Bass', label: 'Synth Bass 101' },\r\n    { number: 39, subnumber: 2, group: 'Bass', label: 'Synth Bass 3' },\r\n    { number: 39, subnumber: 3, group: 'Bass', label: 'Clavi Bass' },\r\n    { number: 39, subnumber: 4, group: 'Bass', label: 'Hammer' },\r\n    { number: 40, subnumber: 0, group: 'Bass', label: 'Synth Bass 2' },\r\n    { number: 40, subnumber: 1, group: 'Bass', label: 'Synth Bass 4' },\r\n    { number: 40, subnumber: 2, group: 'Bass', label: 'Rubber Bass' },\r\n    { number: 40, subnumber: 3, group: 'Bass', label: 'Attack Pulse' },\r\n    { number: 41, subnumber: 0, group: 'Strings', label: 'Violin' },\r\n    { number: 41, subnumber: 1, group: 'Strings', label: 'Slow Violin' },\r\n    { number: 42, subnumber: 0, group: 'Strings', label: 'Viola' },\r\n    { number: 43, subnumber: 0, group: 'Strings', label: 'Cello' },\r\n    { number: 44, subnumber: 0, group: 'Strings', label: 'Contrabass' },\r\n    { number: 45, subnumber: 0, group: 'Strings', label: 'Tremolo Strings' },\r\n    { number: 46, subnumber: 0, group: 'Strings', label: 'Pizzicato Strings' },\r\n    { number: 47, subnumber: 0, group: 'Strings', label: 'Harp' },\r\n    { number: 47, subnumber: 1, group: 'Strings', label: 'Yang Qin' },\r\n    { number: 48, subnumber: 0, group: 'Strings', label: 'Timpani' },\r\n    { number: 49, subnumber: 0, group: 'Orchestral Ensemble', label: 'String Ensemble' },\r\n    { number: 49, subnumber: 1, group: 'Orchestral Ensemble', label: 'Orchestra Strings' },\r\n    { number: 49, subnumber: 2, group: 'Orchestral Ensemble', label: '60\\'s Strings' },\r\n    { number: 50, subnumber: 0, group: 'Orchestral Ensemble', label: 'Slow String Ensemble' },\r\n    { number: 51, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Strings 1' },\r\n    { number: 51, subnumber: 1, group: 'Orchestral Ensemble', label: 'Synth Strings 3' },\r\n    { number: 52, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Strings 2' },\r\n    { number: 53, subnumber: 0, group: 'Orchestral Ensemble', label: 'Choir Aahs' },\r\n    { number: 53, subnumber: 1, group: 'Orchestral Ensemble', label: 'Choir Aahs 2' },\r\n    { number: 54, subnumber: 0, group: 'Orchestral Ensemble', label: 'Voice Oohs' },\r\n    { number: 54, subnumber: 1, group: 'Orchestral Ensemble', label: 'Humming' },\r\n    { number: 55, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Voice' },\r\n    { number: 55, subnumber: 1, group: 'Orchestral Ensemble', label: 'Analog Voice' },\r\n    { number: 56, subnumber: 0, group: 'Orchestral Ensemble', label: 'Orchestra Hit' },\r\n    { number: 56, subnumber: 1, group: 'Orchestral Ensemble', label: 'Bass Hit' },\r\n    { number: 56, subnumber: 2, group: 'Orchestral Ensemble', label: '6th Hit' },\r\n    { number: 56, subnumber: 3, group: 'Orchestral Ensemble', label: 'Euro Hit' },\r\n    { number: 57, subnumber: 0, group: 'Brass', label: 'Trumpet' },\r\n    { number: 57, subnumber: 1, group: 'Brass', label: 'Dark Trumpet' },\r\n    { number: 58, subnumber: 0, group: 'Brass', label: 'Trombone' },\r\n    { number: 58, subnumber: 1, group: 'Brass', label: 'Trombone 2' },\r\n    { number: 58, subnumber: 2, group: 'Brass', label: 'Bright Trombone' },\r\n    { number: 59, subnumber: 0, group: 'Brass', label: 'Tuba' },\r\n    { number: 60, subnumber: 0, group: 'Brass', label: 'Muted Trumpet' },\r\n    { number: 60, subnumber: 1, group: 'Brass', label: 'Muted Trumpet 2' },\r\n    { number: 61, subnumber: 0, group: 'Brass', label: 'French Horn' },\r\n    { number: 61, subnumber: 1, group: 'Brass', label: 'French Horn 2' },\r\n    { number: 62, subnumber: 0, group: 'Brass', label: 'Brass Section' },\r\n    { number: 62, subnumber: 1, group: 'Brass', label: 'Brass Section' },\r\n    { number: 63, subnumber: 0, group: 'Brass', label: 'Synth Brass 1' },\r\n    { number: 63, subnumber: 1, group: 'Brass', label: 'Synth Brass 3' },\r\n    { number: 63, subnumber: 2, group: 'Brass', label: 'Analog Brass 1' },\r\n    { number: 63, subnumber: 3, group: 'Brass', label: 'Jump Brass' },\r\n    { number: 64, subnumber: 0, group: 'Brass', label: 'Synth Brass 2' },\r\n    { number: 64, subnumber: 1, group: 'Brass', label: 'Synth Brass 4' },\r\n    { number: 64, subnumber: 2, group: 'Brass', label: 'Analog Brass 2' },\r\n    { number: 65, subnumber: 0, group: 'Reed', label: 'Soprano Sax' },\r\n    { number: 66, subnumber: 0, group: 'Reed', label: 'Alto Sax' },\r\n    { number: 67, subnumber: 0, group: 'Reed', label: 'Tenor Sax' },\r\n    { number: 68, subnumber: 0, group: 'Reed', label: 'Baritone Sax' },\r\n    { number: 69, subnumber: 0, group: 'Reed', label: 'Oboe' },\r\n    { number: 70, subnumber: 0, group: 'Reed', label: 'English Horn' },\r\n    { number: 71, subnumber: 0, group: 'Reed', label: 'Bassoon' },\r\n    { number: 72, subnumber: 0, group: 'Reed', label: 'Clarinet' },\r\n    { number: 73, subnumber: 0, group: 'Wind', label: 'Piccolo' },\r\n    { number: 74, subnumber: 0, group: 'Wind', label: 'Flute' },\r\n    { number: 75, subnumber: 0, group: 'Wind', label: 'Recorder' },\r\n    { number: 76, subnumber: 0, group: 'Wind', label: 'Pan Flute' },\r\n    { number: 77, subnumber: 0, group: 'Wind', label: 'Blown Bottle' },\r\n    { number: 78, subnumber: 0, group: 'Wind', label: 'Shakuhachi' },\r\n    { number: 79, subnumber: 0, group: 'Wind', label: 'Whistle' },\r\n    { number: 80, subnumber: 0, group: 'Wind', label: 'Ocarina' },\r\n    { number: 81, subnumber: 0, group: 'Lead', label: 'Square Lead' },\r\n    { number: 81, subnumber: 1, group: 'Lead', label: 'Square Wave' },\r\n    { number: 81, subnumber: 2, group: 'Lead', label: 'Sine Wave' },\r\n    { number: 82, subnumber: 0, group: 'Lead', label: 'Saw Lead' },\r\n    { number: 82, subnumber: 1, group: 'Lead', label: 'Saw Wave' },\r\n    { number: 82, subnumber: 2, group: 'Lead', label: 'Doctor Solo' },\r\n    { number: 82, subnumber: 3, group: 'Lead', label: 'Natural Lead' },\r\n    { number: 82, subnumber: 4, group: 'Lead', label: 'Sequenced Saw' },\r\n    { number: 83, subnumber: 0, group: 'Lead', label: 'Synth Calliope' },\r\n    { number: 84, subnumber: 0, group: 'Lead', label: 'Chiffer Lead' },\r\n    { number: 85, subnumber: 0, group: 'Lead', label: 'Charang' },\r\n    { number: 85, subnumber: 1, group: 'Lead', label: 'Wire Lead' },\r\n    { number: 86, subnumber: 0, group: 'Lead', label: 'Solo Synth Vox' },\r\n    { number: 87, subnumber: 0, group: 'Lead', label: '5th Saw Wave' },\r\n    { number: 88, subnumber: 0, group: 'Lead', label: 'Bass & Lead' },\r\n    { number: 88, subnumber: 1, group: 'Lead', label: 'Delayed Lead' },\r\n    { number: 89, subnumber: 0, group: 'Synth Pad', label: 'Fantasia Pad' },\r\n    { number: 90, subnumber: 0, group: 'Synth Pad', label: 'Warm Pad' },\r\n    { number: 90, subnumber: 1, group: 'Synth Pad', label: 'Sine Pad' },\r\n    { number: 91, subnumber: 0, group: 'Synth Pad', label: 'Polysynth Pad' },\r\n    { number: 92, subnumber: 0, group: 'Synth Pad', label: 'Space Voice Pad' },\r\n    { number: 92, subnumber: 1, group: 'Synth Pad', label: 'Itopia' },\r\n    { number: 93, subnumber: 0, group: 'Synth Pad', label: 'Bowed Glass Pad' },\r\n    { number: 94, subnumber: 0, group: 'Synth Pad', label: 'Metal Pad' },\r\n    { number: 95, subnumber: 0, group: 'Synth Pad', label: 'Halo Pad' },\r\n    { number: 96, subnumber: 0, group: 'Synth Pad', label: 'Sweep Pad' },\r\n    { number: 97, subnumber: 0, group: 'Synth Effects', label: 'Ice Rain' },\r\n    { number: 98, subnumber: 0, group: 'Synth Effects', label: 'Soundtrack' },\r\n    { number: 99, subnumber: 0, group: 'Synth Effects', label: 'Crystal' },\r\n    { number: 99, subnumber: 1, group: 'Synth Effects', label: 'Synth Mallet' },\r\n    { number: 100, subnumber: 0, group: 'Synth Effects', label: 'Atmosphere' },\r\n    { number: 101, subnumber: 0, group: 'Synth Effects', label: 'Brightness' },\r\n    { number: 102, subnumber: 0, group: 'Synth Effects', label: 'Goblin' },\r\n    { number: 103, subnumber: 0, group: 'Synth Effects', label: 'Echo Drops' },\r\n    { number: 103, subnumber: 1, group: 'Synth Effects', label: 'Echo Bell' },\r\n    { number: 103, subnumber: 2, group: 'Synth Effects', label: 'Echo Pan' },\r\n    { number: 104, subnumber: 0, group: 'Synth Effects', label: 'Star Theme' },\r\n    { number: 105, subnumber: 0, group: 'Ethnic', label: 'Sitar' },\r\n    { number: 105, subnumber: 1, group: 'Ethnic', label: 'Sitar 2' },\r\n    { number: 106, subnumber: 0, group: 'Ethnic', label: 'Banjo' },\r\n    { number: 107, subnumber: 0, group: 'Ethnic', label: 'Shamisen' },\r\n    { number: 108, subnumber: 0, group: 'Ethnic', label: 'Koto' },\r\n    { number: 108, subnumber: 1, group: 'Ethnic', label: 'Taisho Koto' },\r\n    { number: 109, subnumber: 0, group: 'Ethnic', label: 'Kalimba' },\r\n    { number: 110, subnumber: 0, group: 'Ethnic', label: 'Bagpipe' },\r\n    { number: 111, subnumber: 0, group: 'Ethnic', label: 'Fiddle' },\r\n    { number: 112, subnumber: 0, group: 'Ethnic', label: 'Shanai' },\r\n    { number: 113, subnumber: 0, group: 'Percussive', label: 'Tinkle Bell' },\r\n    { number: 114, subnumber: 0, group: 'Percussive', label: 'Agogo' },\r\n    { number: 115, subnumber: 0, group: 'Percussive', label: 'Steel Drums' },\r\n    { number: 116, subnumber: 0, group: 'Percussive', label: 'Woodblock' },\r\n    { number: 116, subnumber: 1, group: 'Percussive', label: 'Castanets' },\r\n    { number: 117, subnumber: 0, group: 'Percussive', label: 'Taiko Drum' },\r\n    { number: 117, subnumber: 1, group: 'Percussive', label: 'Concert Bass Drum' },\r\n    { number: 118, subnumber: 0, group: 'Percussive', label: 'Melodic Tom 1' },\r\n    { number: 118, subnumber: 1, group: 'Percussive', label: 'Melodic Tom 2' },\r\n    { number: 119, subnumber: 0, group: 'Percussive', label: 'Synth Drum' },\r\n    { number: 119, subnumber: 1, group: 'Percussive', label: '808 Tom' },\r\n    { number: 119, subnumber: 2, group: 'Percussive', label: 'Electric Percussion' },\r\n    { number: 120, subnumber: 0, group: 'Percussive', label: 'Reverse Cymbal' },\r\n    { number: 121, subnumber: 0, group: 'Sound Effects', label: 'Guitar Fret Noise' },\r\n    { number: 121, subnumber: 1, group: 'Sound Effects', label: 'Guitar Cut Noise' },\r\n    { number: 121, subnumber: 2, group: 'Sound Effects', label: 'String Slap' },\r\n    { number: 122, subnumber: 0, group: 'Sound Effects', label: 'Breath Noise' },\r\n    { number: 122, subnumber: 1, group: 'Sound Effects', label: 'Flute Key Click' },\r\n    { number: 123, subnumber: 0, group: 'Sound Effects', label: 'Seashore' },\r\n    { number: 123, subnumber: 1, group: 'Sound Effects', label: 'Rain' },\r\n    { number: 123, subnumber: 2, group: 'Sound Effects', label: 'Thunder' },\r\n    { number: 123, subnumber: 3, group: 'Sound Effects', label: 'Wind' },\r\n    { number: 123, subnumber: 4, group: 'Sound Effects', label: 'Stream' },\r\n    { number: 123, subnumber: 5, group: 'Sound Effects', label: 'Bubble' },\r\n    { number: 124, subnumber: 0, group: 'Sound Effects', label: 'Bird Tweet' },\r\n    { number: 124, subnumber: 1, group: 'Sound Effects', label: 'Dog' },\r\n    { number: 124, subnumber: 2, group: 'Sound Effects', label: 'Horse Gallop' },\r\n    { number: 124, subnumber: 3, group: 'Sound Effects', label: 'Bird 2' },\r\n    { number: 125, subnumber: 0, group: 'Sound Effects', label: 'Telephone 1' },\r\n    { number: 125, subnumber: 1, group: 'Sound Effects', label: 'Telephone 2' },\r\n    { number: 125, subnumber: 2, group: 'Sound Effects', label: 'Door Creaking' },\r\n    { number: 125, subnumber: 3, group: 'Sound Effects', label: 'Door Closing' },\r\n    { number: 125, subnumber: 4, group: 'Sound Effects', label: 'Scratch' },\r\n    { number: 125, subnumber: 5, group: 'Sound Effects', label: 'Wind Chimes' },\r\n    { number: 126, subnumber: 0, group: 'Sound Effects', label: 'Helicopter' },\r\n    { number: 126, subnumber: 1, group: 'Sound Effects', label: 'Car Engine' },\r\n    { number: 126, subnumber: 2, group: 'Sound Effects', label: 'Car Stop' },\r\n    { number: 126, subnumber: 3, group: 'Sound Effects', label: 'Car Pass' },\r\n    { number: 126, subnumber: 4, group: 'Sound Effects', label: 'Car Crash' },\r\n    { number: 126, subnumber: 5, group: 'Sound Effects', label: 'Siren' },\r\n    { number: 126, subnumber: 6, group: 'Sound Effects', label: 'Train' },\r\n    { number: 126, subnumber: 7, group: 'Sound Effects', label: 'Jetplane' },\r\n    { number: 126, subnumber: 8, group: 'Sound Effects', label: 'Starship' },\r\n    { number: 126, subnumber: 9, group: 'Sound Effects', label: 'Burst Noise' },\r\n    { number: 127, subnumber: 0, group: 'Sound Effects', label: 'Applause' },\r\n    { number: 127, subnumber: 1, group: 'Sound Effects', label: 'Laughing' },\r\n    { number: 127, subnumber: 2, group: 'Sound Effects', label: 'Screaming' },\r\n    { number: 127, subnumber: 3, group: 'Sound Effects', label: 'Punch' },\r\n    { number: 127, subnumber: 4, group: 'Sound Effects', label: 'Heart Beat' },\r\n    { number: 127, subnumber: 5, group: 'Sound Effects', label: 'Footsteps' },\r\n    { number: 128, subnumber: 0, group: 'Sound Effects', label: 'Gun Shot' },\r\n    { number: 128, subnumber: 1, group: 'Sound Effects', label: 'Machine Gun' },\r\n    { number: 128, subnumber: 2, group: 'Sound Effects', label: 'Lasergun' },\r\n    { number: 128, subnumber: 3, group: 'Sound Effects', label: 'Explosion' }\r\n];\r\n\r\nconst GENERAL_MIDI_DRUM_NOTE_NUMBERS = new Map([\r\n    [27, 'High Q(GM2)'],\r\n    [28, 'Slap(GM2)'],\r\n    [29, 'Scratch Push(GM2)'],\r\n    [30, 'Scratch Pull(GM2)'],\r\n    [31, 'Sticks(GM2)'],\r\n    [32, 'Square Click(GM2)'],\r\n    [33, 'Metronome Click(GM2)'],\r\n    [34, 'Metronome Bell(GM2)'],\r\n    [35, 'Bass Drum 2'],\r\n    [36, 'Bass Drum 1'],\r\n    [37, 'Side Stick'],\r\n    [38, 'Snare Drum 1'],\r\n    [39, 'Hand Clap'],\r\n    [40, 'Snare Drum 2'],\r\n    [41, 'Low Tom 2'],\r\n    [42, 'Closed Hi-hat'],\r\n    [43, 'Low Tom 1'],\r\n    [44, 'Pedal Hi-hat'],\r\n    [45, 'Mid Tom 2'],\r\n    [46, 'Open Hi-hat'],\r\n    [47, 'Mid Tom 1'],\r\n    [48, 'High Tom 2'],\r\n    [49, 'Crash Cymbal 1'],\r\n    [50, 'High Tom 1'],\r\n    [51, 'Ride Cymbal 1'],\r\n    [52, 'Chinese Cymbal'],\r\n    [53, 'Ride Bell'],\r\n    [54, 'Tambourine'],\r\n    [55, 'Splash Cymbal'],\r\n    [56, 'Cowbell'],\r\n    [57, 'Crash Cymbal 2'],\r\n    [58, 'Vibra Slap'],\r\n    [59, 'Ride Cymbal 2'],\r\n    [60, 'High Bongo'],\r\n    [61, 'Low Bongo'],\r\n    [62, 'Mute High Conga'],\r\n    [63, 'Open High Conga'],\r\n    [64, 'Low Conga'],\r\n    [65, 'High Timbale'],\r\n    [66, 'Low Timbale'],\r\n    [67, 'High Agogo'],\r\n    [68, 'Low Agogo'],\r\n    [69, 'Cabasa'],\r\n    [70, 'Maracas'],\r\n    [71, 'Short Whistle'],\r\n    [72, 'Long Whistle'],\r\n    [73, 'Short Guiro'],\r\n    [74, 'Long Guiro'],\r\n    [75, 'Claves'],\r\n    [76, 'High Wood Block'],\r\n    [77, 'Low Wood Block'],\r\n    [78, 'Mute Cuica'],\r\n    [79, 'Open Cuica'],\r\n    [80, 'Mute Triangle'],\r\n    [81, 'Open Triangle'],\r\n    [82, 'Shaker(GM2)'],\r\n    [83, 'Jingle Bell(GM2)'],\r\n    [84, 'Belltree(GM2)'],\r\n    [85, 'Castanets(GM2)'],\r\n    [86, 'Mute Surdo(GM2)'],\r\n    [87, 'Open Surdo(GM2)']\r\n]);\r\n\r\n// TODO: This might be useful, e.g. to check which notes Player can play\r\n// const MIDI_NOTE_RANGES = [\r\n//     // Strings\r\n//     { instrNr: 40, nrL2: -1, subNrL2: -1, label: 'Violin', min: 55, max: 103 },\r\n//     { instrNr: 41, nrL2: -1, subNrL2: -1, label: 'Viola', min: 48, max: 91 },\r\n//     { instrNr: 42, nrL2: -1, subNrL2: -1, label: 'Cello', min: 36, max: 76 },\r\n//     { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Double Bass', min: 28, max: 67 },\r\n//     { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Bass Guitar', min: 28, max: 67 },\r\n//     { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Acoustic Guitar', min: 40, max: 88 },\r\n//     // Brass\r\n//     { instrNr: 58, nrL2: 59, subNrL2: 0, label: 'Tuba', min: 28, max: 58 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Trombone', min: 34, max: 67 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'French Horn', min: 34, max: 77 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Trombone', min: 40, max: 72 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Trumpet', min: 55, max: 82 },\r\n//     // Woodwinds\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Piccolo', min: 74, max: 102 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Flute', min: 60, max: 96 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Oboe', min: 58, max: 91 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Flute', min: 55, max: 91 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Cor Anglais (English Horn)', min: 52, max: 81 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Clarinet', min: 50, max: 94 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Clarinet', min: 38, max: 77 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bassoon', min: 34, max: 75 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Contrabassoon', min: 22, max: 53 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Soprano Recorder', min: 72, max: 98 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Recorder', min: 65, max: 91 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tenor Recorder', min: 60, max: 86 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Recorder', min: 53, max: 79 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Baritone Sax', min: 36, max: 69 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tenor Sax', min: 44, max: 76 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Sax', min: 49, max: 81 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Soprano Sax', min: 56, max: 88 },\r\n//     // Tuned Percussion\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Glockenspiel', min: 79, max: 108 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Xylophone', min: 65, max: 108 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Vibraphone', min: 53, max: 89 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Marimba', min: 45, max: 96 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Marimba', min: 33, max: 81 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Celeste', min: 60, max: 108 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tubular Bells', min: 60, max: 77 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Timpani', min: 40, max: 55 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Harpsichord', min: 29, max: 89 },\r\n//     { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Harp', min: 24, max: 103 }\r\n// ];\r\n\r\n// Build lookup maps\r\nfor (let note of MIDI_NOTES) {\r\n    MidiNoteByPitch.set(note.pitch, note);\r\n    MidiNoteByLabel.set(note.label, note);\r\n}\r\nfor (let instrument of MIDI_INSTRUMENTS) {\r\n    MidiInstrumentByNumber.set(instrument.number, instrument);\r\n}\r\nfor (let instrument of MIDI_INSTRUMENTS_Lev2) {\r\n    const key = `${instrument.number}-${instrument.subnumber}`;\r\n    MidiInstrumentByNumberLev2.set(key, instrument);\r\n}\r\n","import { randomInt } from \"d3-random\";\n\n/**\n * Generates a random float in [min, max)\n * @param {number} min minimum\n * @param {number} max maximum\n * @returns {number} random float\n */\nexport function randFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\n/**\n * Returns a random element from the given array.\n * @param {Array} array an array\n * @returns {any} random element from the array\n */\nexport function choose(array) {\n    const index = randomInt(0, array.length)();\n    return array[index];\n}\n\n/**\n * Shortcut for Math.max(minValue, Math.min(maxValue, value))\n * @param {number} value value\n * @param {number} minValue lower limit\n * @param {number} maxValue upper limit\n * @returns {number} clipped number\n */\nexport function clipValue(value, minValue, maxValue) {\n    return Math.max(minValue, Math.min(maxValue, value));\n}\n\n/**\n * Swaps two numbers if the first is larger than the second\n * @param {number} x a number\n * @param {number} y a number\n * @returns {number[]} array with the smaller number first\n */\nexport function swapSoSmallerFirst(x, y) {\n    if (x <= y) {\n        return [x, y];\n    }\n    return [y, x];\n}\n","import React from 'react';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { extent } from 'd3-array';\r\nimport { axisBottom, axisLeft } from 'd3-axis';\r\nimport { select } from 'd3-selection';\r\nimport View from '../lib/ui/View';\r\nimport { flattenArray } from '../lib/utils/ArrayUtils';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\nimport { drawNoteTrapezoid, setupCanvas, clipLeftRight } from '../lib/ui/Graphics';\r\nimport { getMidiNoteByNr, isSharp } from '../lib/Midi';\r\nimport { swapSoSmallerFirst, clipValue } from '../lib/utils/MathUtils';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default class PitchTimeChart extends View {\r\n\r\n    constructor(props) {\r\n        const margin = { top: 35, right: 20, bottom: 40, left: 55 };\r\n        super(props, margin);\r\n        this.state = {\r\n            ...this.state,\r\n            overviewHeight: 80,\r\n            showAllTime: false,\r\n            selectedTrack: 'all',\r\n            // pitch, note, drums\r\n            yAxisLabelType: 'pitch',\r\n            boxHeight: null,\r\n            notes: [],\r\n            liveNotes: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => this.initialize();\r\n\r\n    onResize = () => this.initialize();\r\n\r\n    componentDidUpdate() {\r\n        this.resizeComponent();\r\n        if (this.state.initialized) {\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    initialize = () => {\r\n        const { width, height, overviewHeight, yAxisLabelType } = this.state;\r\n        const svg = select(this.svg);\r\n        svg.selectAll('*').remove();\r\n        // Scales\r\n        const x = scaleLinear().range([2, width]);\r\n        const xOv = scaleLinear().range([2, width]);\r\n        const y = scaleLinear().range([height, overviewHeight + 25]);\r\n        const yOv = scaleLinear().range([overviewHeight, 0]);\r\n        // Axes\r\n        const xAxis = axisBottom(x);\r\n        const yAxis = axisLeft(y);\r\n        if (yAxisLabelType === 'note') {\r\n            yAxis.tickFormat(d => getMidiNoteByNr(d)?.label);\r\n        }\r\n        const xAxisEl = svg.append('g')\r\n            .attr('class', 'axis')\r\n            .attr('transform', `translate(0, ${height})`)\r\n            .call(xAxis);\r\n        const yAxisEl = svg.append('g')\r\n            .attr('class', 'axis')\r\n            .call(yAxis);\r\n        // Labels\r\n        svg.append('text')\r\n            .attr('class', 'yAxisLabel')\r\n            .text('Pitch')\r\n            .attr('transform', `rotate(90) translate(${(height + overviewHeight) / 2}, ${45})`);\r\n        // Setup canvas rescaled to device pixel ratio\r\n        setupCanvas(this.canvas);\r\n        setupCanvas(this.highlightCanvas);\r\n        this.setState({ initialized: true, svg, x, xOv, y, yOv, xAxis, yAxis, xAxisEl, yAxisEl });\r\n    }\r\n\r\n    /**\r\n     * Draws the note retangles.\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     * @param {Notes[]} notes notes with start, end, pitch\r\n     * @param {number} boxHeight height of each pitch-line\r\n     * @param {Function} x D3 linearScale x scale\r\n     * @param {Function} y D3 linearScale y scale\r\n     */\r\n    drawNotes = (ctx, notes, boxHeight, x, y) => {\r\n        const { width, margin } = this.state;\r\n        const veloScale = scaleLinear()\r\n            .domain([0, 127])\r\n            .range([boxHeight * 0.1, boxHeight]);\r\n        for (let note of notes) {\r\n            const startPos = x(note.start);\r\n            const endPos = x(note.end);\r\n            // Do not draw invisible notes\r\n            if (endPos < 0 || startPos > width) {\r\n                continue;\r\n            }\r\n            const xPos = margin.left + startPos;\r\n            // TODO: encode velocity in height?\r\n            const h = veloScale(note.velocity);\r\n            const yPos = margin.top + y(note.pitch) - h / 2;\r\n            const w = Math.max(endPos - startPos, 1);\r\n            drawNoteTrapezoid(ctx, xPos, yPos, w, h, h / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main drawing function\r\n     */\r\n    draw = () => {\r\n        const { viewWidth, viewHeight, margin, width, height, overviewHeight, x, xOv, y, yOv, xAxis, yAxis, xAxisEl, yAxisEl, selectedTrack, showAllTime } = this.state;\r\n        const { midiFileData, timeSelection } = this.props;\r\n        // Prepare main and highlight canvas\r\n        const ctx = this.canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, viewWidth, viewHeight);\r\n        const ctx2 = this.highlightCanvas.getContext('2d');\r\n        ctx2.clearRect(0, 0, viewWidth, viewHeight);\r\n\r\n        // Get notes\r\n        let track;\r\n        let allNotes = [];\r\n        if (midiFileData && midiFileData.length > 0) {\r\n            if (selectedTrack === 'all') {\r\n                // Show all tracks\r\n                allNotes = flattenArray(midiFileData);\r\n            } else {\r\n                // Show selected track\r\n                track = Math.min(selectedTrack, midiFileData.length - 1);\r\n                allNotes = midiFileData[track];\r\n            }\r\n\r\n        }\r\n        if (allNotes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Set x scale domain\r\n        const [start, end] = extent(allNotes, d => d.end);\r\n        const xDomain = [start < 0 ? start : 0, end];\r\n        xOv.domain(xDomain);\r\n        if (showAllTime) {\r\n            // Show all notes\r\n            x.domain(xDomain);\r\n        } else {\r\n            let interval = [0, end];\r\n            if (timeSelection) {\r\n                interval = timeSelection;\r\n            }\r\n            x.domain(interval);\r\n        }\r\n        xAxisEl.call(xAxis);\r\n        // Set y scale domain\r\n        const [low, high] = extent(allNotes, d => d.pitch);\r\n        y.domain([+low - 1, +high + 1]);\r\n        yOv.domain([+low - 1, +high + 1]);\r\n        yAxisEl.call(yAxis);\r\n        // If only one track, use color for channels\r\n        // and allow to only show a single channel\r\n        let tracks = selectedTrack === 'all' ? midiFileData : [midiFileData[track]];\r\n\r\n        // Draw background bands and measure lines\r\n        this.drawRowBandsForSharps(ctx, margin, y, low, high, width, 'rgba(128, 128, 128, 0.15)');\r\n        this.drawMeasures(ctx);\r\n\r\n        // Draw notes onto canvas\r\n        const colors = schemeCategory10;\r\n        const boxHeight = height / (high - low + 3);\r\n        const boxHeight2 = overviewHeight / (high - low + 1);\r\n        tracks.forEach((tr, i) => {\r\n            ctx.fillStyle = colors[i % colors.length];\r\n            this.drawNotes(ctx, tr, boxHeight, x, y);\r\n            this.drawNotes(ctx, tr, boxHeight2, xOv, yOv);\r\n        });\r\n\r\n        // Separator between overview and main visualization\r\n        ctx.fillStyle = '#888';\r\n        ctx.fillRect(margin.left, margin.top + overviewHeight + 12, width, 1);\r\n        clipLeftRight(ctx, margin, width, height);\r\n\r\n        // Draw time selection and similar sections\r\n        if (timeSelection) {\r\n            const [start, end] = timeSelection;\r\n            this.drawTimeSelection(ctx2, start, end, 'rgba(70, 130, 180, 0.2)');\r\n        }\r\n        // Draw current player time\r\n        this.drawCurrentPlayerTime(ctx2);\r\n    }\r\n\r\n    /**\r\n     * Draws horizontal bands with alternating color to better distinguish rows.\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     */\r\n    drawRowBandsForSharps = (ctx, margin, y, low, high, width, fillStyle = 'rgba(128, 128, 128, 0.1)') => {\r\n        const oldFill = ctx.fillStyle;\r\n        ctx.fillStyle = fillStyle;\r\n        const rowHeight = y(0) - y(1);\r\n        const xPos = margin.left;\r\n        for (let pitch = low - 1; pitch <= high + 1; pitch++) {\r\n            // Only draw for shaprs\r\n            if (isSharp(pitch)) {\r\n                const yPos = margin.top + y(pitch) - rowHeight / 2;\r\n                ctx.fillRect(xPos, yPos, width, rowHeight);\r\n            }\r\n        }\r\n        ctx.fillStyle = oldFill;\r\n    }\r\n\r\n    /**\r\n     * Draws measure lines (not on the overview)\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     */\r\n    drawMeasures = (ctx) => {\r\n        const { xmlFileData, selectedTrack } = this.props;\r\n        const { margin, width, height, overviewHeight, x } = this.state;\r\n        if (!xmlFileData) { return; }\r\n        const part = xmlFileData.parts[selectedTrack === 'all' ? 0 : selectedTrack];\r\n        ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\r\n        const yPos = margin.top + overviewHeight + 20;\r\n        const h = height - overviewHeight - 20;\r\n        for (let p of part.measureLinePositions) {\r\n            const pos = x(p);\r\n            if (pos <= 0 || pos > width) { continue; }\r\n            ctx.fillRect(margin.left + pos, yPos, 1, h);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the current player time (from props) onto the highlight canvas.\r\n     */\r\n    drawCurrentPlayerTime = (ctx) => {\r\n        const { margin, height, overviewHeight, x, xOv } = this.state;\r\n        const { currentPlayerTime } = this.props;\r\n        if (currentPlayerTime === null) { return; }\r\n        ctx.fillStyle = 'steelblue';\r\n        ctx.fillRect(margin.left + xOv(currentPlayerTime), margin.top, 2, overviewHeight);\r\n        ctx.fillRect(margin.left + x(currentPlayerTime), margin.top + overviewHeight + 25, 2, height - overviewHeight - 25);\r\n    }\r\n\r\n    /**\r\n     * Draws the current time selection (from props) onto the highlight canvas.\r\n     */\r\n    drawTimeSelection = (ctx, start, end, fill) => {\r\n        const { margin, height, overviewHeight, x, xOv } = this.state;\r\n        ctx.fillStyle = fill;\r\n        const xOv1 = margin.left + xOv(start);\r\n        const xOv2 = margin.left + xOv(end);\r\n        ctx.fillRect(xOv1, margin.top, xOv2 - xOv1, overviewHeight);\r\n        const x1 = margin.left + x(start);\r\n        const x2 = margin.left + x(end);\r\n        ctx.fillRect(x1, margin.top + overviewHeight + 25, x2 - x1, height - overviewHeight - 25);\r\n    }\r\n\r\n    /**\r\n     * Sets the new player start time\r\n     * @param {MouseEvent} e React onClick event\r\n     */\r\n    handleBrushed = (e) => {\r\n        const { margin, overviewHeight, xOv, brushStartEvent } = this.state;\r\n        const { setTimeSelection } = this.props;\r\n        if (!e || !brushStartEvent) { return; }\r\n        const { offsetX: startX, offsetY: startY } = brushStartEvent;\r\n        const { offsetX: endX } = e.nativeEvent;\r\n        // See if start position is in overview\r\n        if (startY < margin.top || startY > margin.top + overviewHeight) {\r\n            return;\r\n        }\r\n        // Get time\r\n        let startTime = xOv.invert(startX - margin.left);\r\n        let endTime = xOv.invert(endX - margin.left);\r\n        // Clip to domain\r\n        const [minTime, maxTime] = xOv.domain();\r\n        startTime = clipValue(startTime, minTime, maxTime);\r\n        endTime = clipValue(endTime, minTime, maxTime);\r\n        const sorted = swapSoSmallerFirst(startTime, endTime);\r\n        // Make selection at least 1 second wide\r\n        if (sorted[1] - sorted[0] < 1) {\r\n            sorted[1] = sorted[0] + 1;\r\n        }\r\n        // Set selection in App.js\r\n        setTimeSelection(sorted);\r\n    }\r\n\r\n    render() {\r\n        const { viewWidth, viewHeight, margin } = this.state;\r\n        const { midiFileData, selectedTrack } = this.props;\r\n        // HTML\r\n        return (\r\n            <div\r\n                className='View PitchTimeChart'\r\n                style={{ gridArea: `span ${this.state.rowSpan} / span ${this.state.columnSpan}` }}\r\n            >\r\n                <canvas\r\n                    className='ViewCanvas'\r\n                    ref={n => this.canvas = n}\r\n                    style={{ width: viewWidth, height: viewHeight }}\r\n                    onMouseDownCapture={(e) => this.setState({ brushStartEvent: e.nativeEvent })}\r\n                    onMouseUpCapture={this.handleBrushed}\r\n                />\r\n                <canvas\r\n                    className='ViewCanvas HighlightCanvas'\r\n                    ref={n => this.highlightCanvas = n}\r\n                    style={{ width: viewWidth, height: viewHeight }}\r\n                />\r\n                <svg\r\n                    width={viewWidth}\r\n                    height={viewHeight}\r\n                >\r\n                    <text\r\n                        className='heading'\r\n                        x={viewWidth / 2}\r\n                        y={20}\r\n                    >\r\n                        MIDI Piano Roll\r\n                    </text>\r\n                    <g\r\n                        ref={n => this.svg = n}\r\n                        transform={`translate(${margin.left}, ${margin.top})`}\r\n                    />\r\n                    <text\r\n                        className='yAxisLabel'\r\n                        x={viewWidth / 2}\r\n                        y={viewHeight - 5}\r\n                    >\r\n                        Time in seconds\r\n                    </text>\r\n                </svg>\r\n                <div className='viewControls'>\r\n                    <select\r\n                        title='MIDI track(s)'\r\n                        onChange={(e) => this.setState({ selectedTrack: e.target.value })}\r\n                        disabled={midiFileData.length > 1 && selectedTrack === 'all'}\r\n                    >\r\n                        <option key='all' value='all'>All tracks</option>\r\n                        {new Array(midiFileData.length).fill(0).map((_, i) => (\r\n                            <option\r\n                                key={i}\r\n                                value={i}\r\n                                style={{ background: schemeCategory10[i % schemeCategory10.length] }}\r\n                            >\r\n                                Track {i}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <select\r\n                        title='Y-axis labels'\r\n                        onChange={(e) => this.setState({ yAxisLabelType: e.target.value }, this.initialize)}\r\n                    >\r\n                        <option value='pitch'>MIDI note</option>\r\n                        <option value='note'>Note name</option>\r\n                    </select>\r\n                    <button\r\n                        title='Toggles between showing the whole time or a selection in the lower part'\r\n                        onClick={() => this.setState({ showAllTime: !this.state.showAllTime })}\r\n                    >\r\n                        <FontAwesomeIcon icon={this.state.showAllTime ? faToggleOn : faToggleOff} />&nbsp;\r\n                        Show whole time\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","\n/**\n * Shallow compares two arrays\n * @param {Array} a an array\n * @param {Array} b another array\n * @returns {boolean} true iff equal\n */\nexport function arrayShallowEquals(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n// TODO: use https://github.com/d3/d3-array/blob/master/README.md#intersection etc\n\n/**\n * Checks if two arrays contain the same elements,\n * ignoring their ordering in each array.\n * @param {Array} a an array\n * @param {Array} b another array\n * @returns {boolean} true iff arrays contain same elements\n */\nexport function arrayHasSameElements(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    const setA = new Set(a);\n    const setB = new Set(b);\n    for (let element of setA) {\n        if (!setB.has(element)) {\n            return false;\n        }\n    }\n    for (let element of setB) {\n        if (!setA.has(element)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Checks whether the array a contains the array b, i.e. whether the first\n * b.length elements are the same.\n * @param {Array} a an array\n * @param {Array} b a shorter array\n * @returns {boolean} true iff a contains b\n */\nexport function arrayContainsArray(a, b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Turns an array of array into a flat array by concatenating all arrays\n * @param {any[][]} array array of arrays\n * @returns {any[]} flattened array\n */\nexport function flattenArray(array) {\n    return [].concat(...array);\n}\n\n/**\n * Returns the maximum numerical value from an array of arrays\n * @param {number[][]} matrix\n * @returns {number} maximum value\n */\nexport function getMatrixMax(matrix) {\n    let maximum = -Infinity;\n    for (let row of matrix) {\n        const value = Math.max(...row);\n        if (value > maximum) {\n            maximum = value;\n        }\n    }\n    return maximum;\n}\n\n/**\n * Prints a 2D array / matrix onto the console.\n * @param {any[][]} matrix the matrix\n * @param {string} colSep column separator\n * @param {string} rowSep row separator\n * @param {Function} formatter formatting for each element\n */\nexport function printMatrix(matrix, colSep = ', ', rowSep = '\\n', formatter) {\n    if (formatter) {\n        matrix = matrix.map(row => row.map(value => formatter(value)));\n    }\n    console.log(matrix.map(row => row.join(colSep)).join(rowSep));\n}\n","import { getMidiNoteByNr } from \"../lib/Midi\";\r\n\r\n/**\r\n * Note class that reflects MIDI properties but has\r\n * absolute start and end times in seconds.\r\n */\r\nexport default class Note {\r\n    /**\r\n     * Creates a new Note\r\n     * @param {number} pitch pitch\r\n     * @param {number} start start time in seconds\r\n     * @param {number} velocity velocity\r\n     * @param {number} channel MIDI channel\r\n     * @param {number} end end time in seconds\r\n     */\r\n    constructor(\r\n        pitch,\r\n        start = 0,\r\n        velocity = 127,\r\n        channel = 0,\r\n        end = null\r\n    ) {\r\n        this.pitch = pitch;\r\n        this.start = start;\r\n        this.velocity = velocity;\r\n        this.channel = channel;\r\n        this.end = end;\r\n    }\r\n\r\n    /**\r\n     * Creates a Note object from an object via destructuring\r\n     * @param {Object} object object with at least {pitch}\r\n     * @returns {Note} new note\r\n     */\r\n    static from(object) {\r\n        const {\r\n            pitch,\r\n            start = 0,\r\n            velocity = 127,\r\n            channel = 0,\r\n            end = null\r\n        } = object;\r\n        if (pitch === undefined) {\r\n            console.error('Cannot create Note with undefined pitch');\r\n            return null;\r\n        }\r\n        return new Note(pitch, start, velocity, channel, end);\r\n    }\r\n\r\n    /**\r\n     * Returns a copy of the Note object\r\n     * @returns {Note} new note\r\n     */\r\n    clone() {\r\n        return new Note(\r\n            this.pitch,\r\n            this.start,\r\n            this.velocity,\r\n            this.channel,\r\n            this.end\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the duration of this note in seconds\r\n     * @returns {number} note duration\r\n     */\r\n    getDuration() {\r\n        if (this.end === null) {\r\n            return 0;\r\n        }\r\n        return this.end - this.start;\r\n    }\r\n\r\n    /**\r\n     * Returns the note's name and octave, e.g. 'C#3'\r\n     * @returns {string} note name as string\r\n     */\r\n    getName() {\r\n        return getMidiNoteByNr(this.pitch).label;\r\n    }\r\n\r\n    /**\r\n     * Returns the note's name WITHOUT the octave, e.g. 'C#'\r\n     * @returns {string} note name as string\r\n     */\r\n    getLetter() {\r\n        return getMidiNoteByNr(this.pitch).name;\r\n    }\r\n\r\n    /**\r\n     * Returns the note's octave.\r\n     * @returns {number} the note's octave\r\n     */\r\n    getOctave() {\r\n        return getMidiNoteByNr(this.pitch).octave;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Note where start and end are multiplied by factor\r\n     * @param {number} addedSeconds seconds to be added to start and end\r\n     * @returns {Note} new note\r\n     */\r\n    shiftTime(addedSeconds) {\r\n        const n = this.clone();\r\n        n.start += addedSeconds;\r\n        n.end = n.end === null ? null : n.end + addedSeconds;\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Note where start and end are multiplied by factor\r\n     * @param {number} factor factor to scale start and end with\r\n     * @returns {Note} new note\r\n     */\r\n    scaleTime(factor) {\r\n        const n = this.clone();\r\n        n.start *= factor;\r\n        n.end = n.end === null ? null : n.end * factor;\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * Returns true if this note and otherNote have equal attributes.\r\n     * @param {Note} otherNote another Note\r\n     * @returns {boolen} true if equal\r\n     */\r\n    equals(otherNote) {\r\n        if (!otherNote instanceof Note) {\r\n            return false;\r\n        }\r\n        return (\r\n            this.pitch === otherNote.pitch &&\r\n            this.start === otherNote.start &&\r\n            this.velocity === otherNote.velocity &&\r\n            this.channel === otherNote.channel &&\r\n            this.end === otherNote.end\r\n        );\r\n    }\r\n}\r\n","import Note from '../types/Note';\r\nimport { group, max } from 'd3-array';\r\n\r\n/**\r\n * Converts beats per minute to seconds per beat\r\n * @param {number} bpm tempo in beats per minute\r\n * @returns {number} seconds per beat\r\n */\r\nexport function bpmToSecondsPerBeat(bpm) {\r\n    return 1 / (bpm / 60);\r\n}\r\n\r\n/**\r\n * Parses a MIDI JSON file to get Note objects with absolute time in seconds.\r\n * See https://github.com/colxi/midi-parser-js/wiki/MIDI-File-Format-Specifications\r\n * @param {Object} data MIDI data in JSON format\r\n * @param {boolean} splitFormat0IntoTracks split MIDI format 0 data into tracks\r\n *      instead of using channels?\r\n * @returns {Objec} including an array of note objects and meta information\r\n */\r\nexport function preprocessMidiFileData(data, splitFormat0IntoTracks = true) {\r\n    if (data === null || data === undefined) {\r\n        console.warn('[MidiParser] MIDI data is null');\r\n        return;\r\n    }\r\n    if (!data.track) {\r\n        console.error('[MidiParser] MIDI data has no track');\r\n        return;\r\n    }\r\n    console.groupCollapsed('[MidiParser] Preprocessing MIDI file data');\r\n    // Parse notes\r\n    let parsedTracks = [];\r\n    const partNames = [];\r\n    const { tempoChanges, beatTypeChanges } = getMidiTempoAndBeatChanges(data.track);\r\n    for (let i = 0; i < data.track.length; i++) {\r\n        const track = data.track[i];\r\n        const t = parseMidiTrack(track, data.timeDivision, tempoChanges, beatTypeChanges);\r\n        if (t !== null) {\r\n            parsedTracks.push(t);\r\n            // Get part name\r\n            let name = getPartName(track.event);\r\n            partNames.push(name ? name : `Track ${i}`);\r\n        }\r\n    }\r\n    // Split MIDI format 0 data into tracks instead of having channels\r\n    if (data.formatType === 0 && splitFormat0IntoTracks && parsedTracks.length > 0) {\r\n        parsedTracks = splitFormat0(parsedTracks);\r\n    }\r\n    // Return similar format as MusicXmlParser\r\n    const result = {\r\n        parts: parsedTracks,\r\n        partNames,\r\n        instruments: null,\r\n        totalTime: max(parsedTracks, d => d.totalTime),\r\n        // This is the first tempo etc., changes are stored in each part\r\n        bpm: parsedTracks[0].bpm,\r\n        beats: parsedTracks[0].beats,\r\n        beatType: parsedTracks[0].beatType,\r\n    };\r\n    console.log(`Got ${parsedTracks.length} MIDI tracks`, result);\r\n    console.groupEnd();\r\n    return result;\r\n}\r\n\r\n/**\r\n * Parses a single MIDI track and pushes it to parsedTracks if it contains notes\r\n * @param {Object} track a MIDI track\r\n * @param {number} timeDivision MIDI time division\r\n * @param {Object[]} tempoChanges array with tempo change events\r\n * @param {Object[]} beatTypeChanges array with beat type change events\r\n */\r\nfunction parseMidiTrack(track, timeDivision, tempoChanges, beatTypeChanges) {\r\n    const notes = [];\r\n    let tempo = tempoChanges.length > 0 ? tempoChanges[0].tempo : 120;\r\n    let currentTick = 0;\r\n    let currentTime;\r\n    let milliSecondsPerTick = getMillisecondsPerTick(tempo, timeDivision);\r\n    let tickOfLastTempoChange = 0;\r\n    let timeOfLastTempoChange = 0;\r\n    for (let event of track.event) {\r\n        currentTick += event.deltaTime;\r\n        let mostRecentTempoChange;\r\n        // Update beat type change times\r\n        for (let btc of beatTypeChanges) {\r\n            if (btc.time === undefined && btc.tick <= currentTick) {\r\n                btc.time = (btc.tick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange;\r\n            }\r\n        }\r\n        // Handle last tempo change in track differently\r\n        if (tempoChanges.length > 0 && currentTick > tempoChanges[tempoChanges.length - 1].tick) {\r\n            mostRecentTempoChange = tempoChanges[tempoChanges.length - 1];\r\n        }\r\n        // Get current tempo, as soon as we are too far, 1 step back\r\n        for (let i = 1; i < tempoChanges.length; i++) {\r\n            const tick = tempoChanges[i].tick;\r\n            if (tick > currentTick) {\r\n                const change = tempoChanges[i - 1];\r\n                mostRecentTempoChange = change;\r\n                break;\r\n            }\r\n        }\r\n        // React to tempo changes\r\n        if (mostRecentTempoChange && mostRecentTempoChange.tempo !== tempo) {\r\n            const tick = mostRecentTempoChange.tick;\r\n            timeOfLastTempoChange = (tick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange;\r\n            tickOfLastTempoChange = tick;\r\n            mostRecentTempoChange.time = timeOfLastTempoChange;\r\n            tempo = mostRecentTempoChange.tempo;\r\n            milliSecondsPerTick = getMillisecondsPerTick(tempo, timeDivision);\r\n        }\r\n        // Update current time in seconds\r\n        currentTime = (currentTick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange;\r\n        // Skip events that are neither note-on nor note-off\r\n        const type = event.type;\r\n        if (type !== 8 && type !== 9) {\r\n            continue;\r\n        }\r\n        const [pitch, velocity] = event.data;\r\n        const channel = event.channel;\r\n        // Avoid numerical precision errors\r\n        currentTime = +(currentTime).toFixed(10);\r\n        if (event.type === 8 || velocity === 0) {\r\n            // This might happen for empty or corrupted files\r\n            if (notes.length === 0) {\r\n                continue;\r\n            }\r\n            // Handle note-off\r\n            // Go back to latest note with the same pitch and add the end time\r\n            // If more than one channel, check also the channel!\r\n            let i = notes.length - 1;\r\n            while (notes[i].pitch !== pitch || notes[i].channel !== channel || notes[i].end !== -1) {\r\n                i--;\r\n                if (i < 0) {\r\n                    console.warn('Did not find note-on event for note-off event!');\r\n                    break;\r\n                }\r\n            }\r\n            if (i >= 0) {\r\n                notes[i].end = currentTime;\r\n            }\r\n        } else {\r\n            // TODO: What about pitch-bend (14) etc?\r\n            // Handle note-on\r\n            notes.push(new Note(\r\n                pitch,\r\n                currentTime,\r\n                velocity,\r\n                channel,\r\n                -1\r\n            ));\r\n        }\r\n    }\r\n    // Fix missing note ends\r\n    for (let note of notes) {\r\n        if (note.end === -1) {\r\n            note.end = currentTime;\r\n        }\r\n    }\r\n    // Generate measure lines from tempo and beat type changes\r\n    const measureLinePositions = getMeasureLines(tempoChanges, beatTypeChanges, currentTime);\r\n    // Save parsed track with meta information\r\n    if (notes.length > 0) {\r\n        const parsedTrack = {\r\n            noteObjs: notes,\r\n            totalTime: currentTime,\r\n            tempoChanges,\r\n            beatTypeChanges,\r\n            measureLinePositions,\r\n            // Initial values\r\n            bpm: tempoChanges[0]?.tempo || 120,\r\n            beats: beatTypeChanges[0]?.beats || 4,\r\n            beatType: beatTypeChanges[0]?.beatType || 4,\r\n        };\r\n        console.log(`Got part with ${notes.length} notes,\\n`, parsedTrack);\r\n        return parsedTrack;\r\n    } else {\r\n        // console.log('Empty track');\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts part name strings from MIDI tracks\r\n * @param {Object[]} track MIDI tracks\r\n * @returns {string[]} part names\r\n */\r\nfunction getPartName(track) {\r\n    for (let event of track) {\r\n        if (event.type === 255 && event.metaType === 3) {\r\n            return event.data;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Caclulates the time positions of measure lines by looking at tempo and beat\r\n * type change events\r\n * TODO: probably does not handle complex meters correctly\r\n * TODO: does not handle tempo change yet, do this as in parsing notes\r\n * @param {Object[]} tempoChanges tempo change events\r\n * @param {Object[]} beatTypeChanges beat type change events\r\n * @param {number} totalTime\r\n * @returns {number[]} measure line times in seconds\r\n */\r\nfunction getMeasureLines(tempoChanges, beatTypeChanges, totalTime) {\r\n    const measureLines = [];\r\n    // Generate measure lines from tempo and beat type changes\r\n    let tempo = 120;\r\n    let beats = 4;\r\n    let secondsPerBeat = bpmToSecondsPerBeat(tempo);\r\n    // let beatType = 4;\r\n    let currentTime = 0;\r\n    let currentBeatsInMeasure = 0;\r\n    let timeOfLastTempoChange = 0;\r\n    let timeSinceLastTempoChange = 0;\r\n    while (currentTime < totalTime) {\r\n        // Get current tempo and beat type\r\n        let mostRecentTempoChange;\r\n        for (const t of tempoChanges) {\r\n            if (t.time <= currentTime) {\r\n                mostRecentTempoChange = t.tempo;\r\n            }\r\n        }\r\n        if (mostRecentTempoChange && mostRecentTempoChange !== tempo) {\r\n            timeOfLastTempoChange = currentTime;\r\n            timeSinceLastTempoChange = 0;\r\n            tempo = mostRecentTempoChange;\r\n            secondsPerBeat = bpmToSecondsPerBeat(tempo);\r\n        }\r\n        for (const b of beatTypeChanges) {\r\n            if (b.time <= currentTime) {\r\n                beats = b.beats;\r\n                // beatType = b.beatType;\r\n            }\r\n        }\r\n        // Update time and beats\r\n        currentBeatsInMeasure++;\r\n        timeSinceLastTempoChange += secondsPerBeat;\r\n        currentTime = timeOfLastTempoChange + timeSinceLastTempoChange;\r\n        if (currentBeatsInMeasure >= beats) {\r\n            // Measure is full\r\n            currentBeatsInMeasure = 0;\r\n            measureLines.push(currentTime);\r\n        }\r\n    }\r\n    return measureLines;\r\n}\r\n\r\n/**\r\n * Split MIDI format 0 data into tracks instead of having channels,\r\n * creates one track for each channel\r\n * @param {Note[][]} tracks parsed MIDI tracks\r\n * @returns {Note[][]} splitted tracks\r\n */\r\nfunction splitFormat0(tracks) {\r\n    if (tracks.length > 1) {\r\n        console.warn(`Splitting a format 0 file with more than 1 track will result in all but the first beeing lost!`);\r\n    }\r\n    console.log('Splitting format 0 file into tracks based on channel');\r\n    const grouped = group(tracks[0].noteObjs, d => d.channel);\r\n    // All tracks will share the meta infomation of the 0th track\r\n    // Assign the splitted-by-channel notes to their new tracks\r\n    const splittedTracks = [];\r\n    grouped.forEach((notes, channelId) => {\r\n        splittedTracks[channelId] = {\r\n            ...tracks[0],\r\n            noteObjs: notes\r\n        };\r\n    });\r\n    return splittedTracks;\r\n}\r\n\r\n/**\r\n * Given the tempo and time division, returns the number of milliseconds\r\n * each MIDI time tick corresponds to\r\n * @param {number} tempo\r\n * @param {number} timeDivision\r\n * @returns {number} milli seconds per tick\r\n */\r\nfunction getMillisecondsPerTick(tempo, timeDivision) {\r\n    const milliSecondsPerBeat = 1 / tempo * 60000;\r\n    const milliSecondsPerTick = milliSecondsPerBeat / timeDivision;\r\n    return milliSecondsPerTick;\r\n}\r\n\r\n/**\r\n * Retrieves all tempo and beat type changes from a MIDI file's tracks.\r\n * See https://github.com/colxi/midi-parser-js/wiki/MIDI-File-Format-Specifications\r\n * @param {Array} tracks MIDI JSON file tracks\r\n * @returns {Object} {tempoChanges, beatTypeChanges} as arrays of objects, which\r\n *      contain the MIDI tick and the new information\r\n */\r\nfunction getMidiTempoAndBeatChanges(tracks) {\r\n    const tempoChanges = [];\r\n    const beatTypeChanges = [];\r\n    let currentTick = 0;\r\n    for (let track of tracks) {\r\n        for (let event of track.event) {\r\n            // Get timing of events\r\n            currentTick += event.deltaTime;\r\n            // Tempo change\r\n            if (event.type === 255 && event.metaType === 81) {\r\n                const milliSecondsPerQuarter = event.data / 1000;\r\n                const tempo = Math.round(1 / (milliSecondsPerQuarter / 60000));\r\n                tempoChanges.push({\r\n                    tick: currentTick,\r\n                    tempo\r\n                });\r\n            }\r\n            // Beat type change\r\n            if (event.type === 255 && event.metaType === 88) {\r\n                const d = event.data;\r\n                const beats = d[0];\r\n                const beatType = Math.pow(2, d[1]);\r\n                beatTypeChanges.push({\r\n                    tick: currentTick,\r\n                    beats,\r\n                    beatType\r\n                });\r\n                // console.log(`Metro: ${d[2]}`);\r\n                // console.log(`32nds: ${d[3]}`);\r\n            }\r\n        }\r\n    }\r\n    // Default values\r\n    if (tempoChanges.length === 0) {\r\n        tempoChanges.push({ tempo: 120, time: 0 });\r\n    }\r\n    if (beatTypeChanges.length === 0) {\r\n        beatTypeChanges.push({ beats: 4, beatType: 4, time: 0 });\r\n    }\r\n    return { tempoChanges, beatTypeChanges };\r\n}\r\n\r\n/**\r\n * TODO: test\r\n *  - convert something to MIDI and back with above function to see if result is the same as the original\r\n *  - and the other way round\r\n * @param {Note[]} notes notes\r\n * @param {number} bpm tempo in beats per minute\r\n */\r\n// export function convertNoteArrayToMIDIJSON(notes, bpm) {\r\n//     const timeDivision = 96;\r\n//     const milliSecondsPerBeat = 1 / bpm * 60_000;\r\n//     const ticksPerMillisecond = timeDivision / milliSecondsPerBeat;\r\n//     const track = [];\r\n//     let currentTime = 0;\r\n//     // For each note create a note on and note off event\r\n//     // duplicate each note and set the start of the second copy to the note's end\r\n//     // sort notes by the new start times\r\n//     const noteOns = notes.slice();\r\n//     const noteOffs = notes.map(n => n.clone());\r\n//     noteOffs.forEach(n => n.start = n.end);\r\n//     const notesNew = noteOns.concat(noteOffs).sort((a, b) => a.start - b.start);\r\n//     // Go through all notes, and remember which ones are currently 'on'\r\n//     // If a note appears and is currently 'off': note_on event, and vice versa\r\n//     const currentlyOn = Array(128).fill(false);\r\n//     for (let note of notesNew) {\r\n//         let eventType;\r\n//         if (!currentlyOn[note.pitch]) {\r\n//             // note_on event\r\n//             eventType = 9;\r\n//         } else if (currentlyOn[note.pitch]) {\r\n//             // note_off event\r\n//             eventType = 8;\r\n//         }\r\n//         currentlyOn[note.pitch] = !currentlyOn[note.pitch];\r\n//         // Convert to ticks\r\n//         const deltaTime = (note.start - currentTime) * 1000 * ticksPerMillisecond;\r\n//         currentTime = note.start;\r\n//         track.push({\r\n//             deltaTime,\r\n//             type: eventType,\r\n//             channel: 0,\r\n//             data: [\r\n//                 note.pitch,\r\n//                 note.velocity\r\n//             ]\r\n//         });\r\n//     }\r\n//     const result = {\r\n//         formatType: 0,\r\n//         tracks: 1,\r\n//         timeDivision,\r\n//         bpm: bpm,\r\n//         track: [\r\n//             { event: track }\r\n//         ]\r\n//     };\r\n//     console.log('[MidiParser] Converted note array to MIDI JSON', result);\r\n//     return JSON.stringify(result);\r\n// }\r\n","import React, { Component } from 'react';\r\nimport './style/App.css';\r\nimport MidiParser from 'midi-parser-js';\r\nimport PitchTimeChart from './components/PitchTimeChart';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { preprocessMidiFileData } from './lib/MidiParser';\r\n\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewSize: {\r\n                outerWidth: 800,\r\n                outerHeight: 600\r\n            },\r\n            midiFileData: [],\r\n            timeSelection: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Scale layout to current screen size\r\n        window.addEventListener('resize', this.onResize, false);\r\n        this.onResize();\r\n\r\n        // select the INPUT element that will handle\r\n        // the file selection.\r\n        let source = document.getElementById('filereader');\r\n        // provide the File source and a callback function\r\n        const _this = this;\r\n        MidiParser.parse(source, function (obj) {\r\n            try {\r\n                const parsed = preprocessMidiFileData(obj);\r\n                const parts = parsed.parts.map(d => d.noteObjs);\r\n                _this.setState({ midiFileData: parts });\r\n            } catch (e) {\r\n                alert('Invalid MIDI file or wrong format!');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the size state when the window size changes\r\n     * so views can react and redraw\r\n     */\r\n    onResize = () => {\r\n        this.setState({\r\n            viewSize: {\r\n                outerWidth: Math.floor(window.innerWidth - 20),\r\n                outerHeight: Math.floor(window.innerHeight - 200)\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Changes the current time selection\r\n     * @param {number[]} timeSelection [start, end] in seconds\r\n     */\r\n    setTimeSelection = (timeSelection) => {\r\n        this.setState({ timeSelection, similarSections: [] });\r\n    };\r\n\r\n    render() {\r\n        const s = this.state;\r\n        return (\r\n            <div className={`App dark`} >\r\n                <div className='fileSelection'>\r\n                    <input\r\n                        className='fileInput'\r\n                        type='file'\r\n                        id='filereader'\r\n                    />\r\n                </div>\r\n                <PitchTimeChart\r\n                    name='Note-Time Chart'\r\n                    viewSize={s.viewSize}\r\n                    midiFileData={s.midiFileData}\r\n                    timeSelection={s.timeSelection}\r\n                    setTimeSelection={this.setTimeSelection}\r\n                />\r\n                <div className='githubLink'>\r\n                    <a href='https://github.com/fheyen/midi-pianoroll'>\r\n                        <FontAwesomeIcon icon={faGithub} />&nbsp;\r\n                        https://github.com/fheyen/midi-pianoroll\r\n                    </a>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}